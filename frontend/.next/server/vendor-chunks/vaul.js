"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vaul";
exports.ids = ["vendor-chunks/vaul"];
exports.modules = {

/***/ "(ssr)/./node_modules/vaul/dist/index.mjs":
/*!******************************************!*\
  !*** ./node_modules/vaul/dist/index.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Content: () => (/* binding */ Content),\n/* harmony export */   Drawer: () => (/* binding */ Drawer),\n/* harmony export */   Handle: () => (/* binding */ Handle),\n/* harmony export */   NestedRoot: () => (/* binding */ NestedRoot),\n/* harmony export */   Overlay: () => (/* binding */ Overlay),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   Root: () => (/* binding */ Root)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-dialog */ \"(ssr)/./node_modules/@radix-ui/react-dialog/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ Content,Drawer,Handle,NestedRoot,Overlay,Portal,Root auto */ function __insertCSS(code) {\n    if (!code || typeof document == \"undefined\") return;\n    let head = document.head || document.getElementsByTagName(\"head\")[0];\n    let style = document.createElement(\"style\");\n    style.type = \"text/css\";\n    head.appendChild(style);\n    style.styleSheet ? style.styleSheet.cssText = code : style.appendChild(document.createTextNode(code));\n}\n\n\n\nconst DrawerContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    drawerRef: {\n        current: null\n    },\n    overlayRef: {\n        current: null\n    },\n    onPress: ()=>{},\n    onRelease: ()=>{},\n    onDrag: ()=>{},\n    onNestedDrag: ()=>{},\n    onNestedOpenChange: ()=>{},\n    onNestedRelease: ()=>{},\n    openProp: undefined,\n    dismissible: false,\n    isOpen: false,\n    isDragging: false,\n    keyboardIsOpen: {\n        current: false\n    },\n    snapPointsOffset: null,\n    snapPoints: null,\n    handleOnly: false,\n    modal: false,\n    shouldFade: false,\n    activeSnapPoint: null,\n    onOpenChange: ()=>{},\n    setActiveSnapPoint: ()=>{},\n    closeDrawer: ()=>{},\n    direction: \"bottom\",\n    shouldScaleBackground: false,\n    setBackgroundColorOnScale: true,\n    noBodyStyles: false,\n    container: null\n});\nconst useDrawerContext = ()=>{\n    const context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(DrawerContext);\n    if (!context) {\n        throw new Error(\"useDrawerContext must be used within a Drawer.Root\");\n    }\n    return context;\n};\n__insertCSS(\"[data-vaul-drawer]{touch-action:none;will-change:transform;transition:transform .5s cubic-bezier(.32, .72, 0, 1);animation-duration:.5s;animation-timing-function:cubic-bezier(0.32,0.72,0,1)}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=bottom][data-state=open]{animation-name:slideFromBottom}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=bottom][data-state=closed]{animation-name:slideToBottom}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=top][data-state=open]{animation-name:slideFromTop}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=top][data-state=closed]{animation-name:slideToTop}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=left][data-state=open]{animation-name:slideFromLeft}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=left][data-state=closed]{animation-name:slideToLeft}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=right][data-state=open]{animation-name:slideFromRight}[data-vaul-drawer][data-vaul-snap-points=false][data-vaul-drawer-direction=right][data-state=closed]{animation-name:slideToRight}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=bottom]{transform:translate3d(0,100%,0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=top]{transform:translate3d(0,-100%,0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=left]{transform:translate3d(-100%,0,0)}[data-vaul-drawer][data-vaul-snap-points=true][data-vaul-drawer-direction=right]{transform:translate3d(100%,0,0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=top]{transform:translate3d(0,var(--snap-point-height,0),0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=bottom]{transform:translate3d(0,var(--snap-point-height,0),0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=left]{transform:translate3d(var(--snap-point-height,0),0,0)}[data-vaul-drawer][data-vaul-delayed-snap-points=true][data-vaul-drawer-direction=right]{transform:translate3d(var(--snap-point-height,0),0,0)}[data-vaul-overlay][data-vaul-snap-points=false]{animation-duration:.5s;animation-timing-function:cubic-bezier(0.32,0.72,0,1)}[data-vaul-overlay][data-vaul-snap-points=false][data-state=open]{animation-name:fadeIn}[data-vaul-overlay][data-state=closed]{animation-name:fadeOut}[data-vaul-overlay][data-vaul-snap-points=true]{opacity:0;transition:opacity .5s cubic-bezier(.32, .72, 0, 1)}[data-vaul-overlay][data-vaul-snap-points=true]{opacity:1}[data-vaul-drawer]:not([data-vaul-custom-container=true])::after{content:'';position:absolute;background:inherit;background-color:inherit}[data-vaul-drawer][data-vaul-drawer-direction=top]::after{top:initial;bottom:100%;left:0;right:0;height:200%}[data-vaul-drawer][data-vaul-drawer-direction=bottom]::after{top:100%;bottom:initial;left:0;right:0;height:200%}[data-vaul-drawer][data-vaul-drawer-direction=left]::after{left:initial;right:100%;top:0;bottom:0;width:200%}[data-vaul-drawer][data-vaul-drawer-direction=right]::after{left:100%;right:initial;top:0;bottom:0;width:200%}[data-vaul-overlay][data-vaul-snap-points=true]:not([data-vaul-snap-points-overlay=true]):not(\\n[data-state=closed]\\n){opacity:0}[data-vaul-overlay][data-vaul-snap-points-overlay=true]{opacity:1}[data-vaul-handle]{display:block;position:relative;opacity:.7;background:#e2e2e4;margin-left:auto;margin-right:auto;height:5px;width:32px;border-radius:1rem;touch-action:pan-y}[data-vaul-handle]:active,[data-vaul-handle]:hover{opacity:1}[data-vaul-handle-hitarea]{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:max(100%,2.75rem);height:max(100%,2.75rem);touch-action:inherit}@media (hover:hover) and (pointer:fine){[data-vaul-drawer]{user-select:none}}@media (pointer:fine){[data-vaul-handle-hitarea]:{width:100%;height:100%}}@keyframes fadeIn{from{opacity:0}to{opacity:1}}@keyframes fadeOut{to{opacity:0}}@keyframes slideFromBottom{from{transform:translate3d(0,100%,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToBottom{to{transform:translate3d(0,100%,0)}}@keyframes slideFromTop{from{transform:translate3d(0,-100%,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToTop{to{transform:translate3d(0,-100%,0)}}@keyframes slideFromLeft{from{transform:translate3d(-100%,0,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToLeft{to{transform:translate3d(-100%,0,0)}}@keyframes slideFromRight{from{transform:translate3d(100%,0,0)}to{transform:translate3d(0,0,0)}}@keyframes slideToRight{to{transform:translate3d(100%,0,0)}}\");\n// This code comes from https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/overlays/src/usePreventScroll.ts\nconst useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction chain$1(...callbacks) {\n    return (...args)=>{\n        for (let callback of callbacks){\n            if (typeof callback === \"function\") {\n                callback(...args);\n            }\n        }\n    };\n}\nfunction isMac() {\n    return testPlatform(/^Mac/);\n}\nfunction isIPhone() {\n    return testPlatform(/^iPhone/);\n}\nfunction isIPad() {\n    return testPlatform(/^iPad/) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.\n    isMac() && navigator.maxTouchPoints > 1;\n}\nfunction isIOS() {\n    return isIPhone() || isIPad();\n}\nfunction testPlatform(re) {\n    return  false ? 0 : undefined;\n}\n// @ts-ignore\nconst visualViewport = typeof document !== \"undefined\" && window.visualViewport;\nfunction isScrollable(node) {\n    let style = window.getComputedStyle(node);\n    return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);\n}\nfunction getScrollParent(node) {\n    if (isScrollable(node)) {\n        node = node.parentElement;\n    }\n    while(node && !isScrollable(node)){\n        node = node.parentElement;\n    }\n    return node || document.scrollingElement || document.documentElement;\n}\n// HTML input types that do not cause the software keyboard to appear.\nconst nonTextInputTypes = new Set([\n    \"checkbox\",\n    \"radio\",\n    \"range\",\n    \"color\",\n    \"file\",\n    \"image\",\n    \"button\",\n    \"submit\",\n    \"reset\"\n]);\n// The number of active usePreventScroll calls. Used to determine whether to revert back to the original page style/scroll position\nlet preventScrollCount = 0;\nlet restore;\n/**\n * Prevents scrolling on the document body on mount, and\n * restores it on unmount. Also ensures that content does not\n * shift due to the scrollbars disappearing.\n */ function usePreventScroll(options = {}) {\n    let { isDisabled } = options;\n    useIsomorphicLayoutEffect(()=>{\n        if (isDisabled) {\n            return;\n        }\n        preventScrollCount++;\n        if (preventScrollCount === 1) {\n            if (isIOS()) {\n                restore = preventScrollMobileSafari();\n            } else {\n                restore = preventScrollStandard();\n            }\n        }\n        return ()=>{\n            preventScrollCount--;\n            if (preventScrollCount === 0) {\n                restore();\n            }\n        };\n    }, [\n        isDisabled\n    ]);\n}\n// For most browsers, all we need to do is set `overflow: hidden` on the root element, and\n// add some padding to prevent the page from shifting when the scrollbar is hidden.\nfunction preventScrollStandard() {\n    return chain$1(setStyle(document.documentElement, \"paddingRight\", `${window.innerWidth - document.documentElement.clientWidth}px`));\n}\n// Mobile Safari is a whole different beast. Even with overflow: hidden,\n// it still scrolls the page in many situations:\n//\n// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.\n// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of\n//    it, so it becomes scrollable.\n// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.\n//    This may cause even fixed position elements to scroll off the screen.\n// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always\n//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.\n//\n// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:\n//\n// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling\n//    on the window.\n// 2. Prevent default on `touchmove` events inside a scrollable element when the scroll position is at the\n//    top or bottom. This avoids the whole page scrolling instead, but does prevent overscrolling.\n// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.\n// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top\n//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element\n//    into view ourselves, without scrolling the whole page.\n// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the\n//    same visually, but makes the actual scroll position always zero. This is required to make all of the\n//    above work or Safari will still try to scroll the page when focusing an input.\n// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting\n//    to navigate to an input with the next/previous buttons that's outside a modal.\nfunction preventScrollMobileSafari() {\n    let scrollable;\n    let lastY = 0;\n    let onTouchStart = (e)=>{\n        // Store the nearest scrollable parent element from the element that the user touched.\n        scrollable = getScrollParent(e.target);\n        if (scrollable === document.documentElement && scrollable === document.body) {\n            return;\n        }\n        lastY = e.changedTouches[0].pageY;\n    };\n    let onTouchMove = (e)=>{\n        // Prevent scrolling the window.\n        if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {\n            e.preventDefault();\n            return;\n        }\n        // Prevent scrolling up when at the top and scrolling down when at the bottom\n        // of a nested scrollable area, otherwise mobile Safari will start scrolling\n        // the window instead. Unfortunately, this disables bounce scrolling when at\n        // the top but it's the best we can do.\n        let y = e.changedTouches[0].pageY;\n        let scrollTop = scrollable.scrollTop;\n        let bottom = scrollable.scrollHeight - scrollable.clientHeight;\n        if (bottom === 0) {\n            return;\n        }\n        if (scrollTop <= 0 && y > lastY || scrollTop >= bottom && y < lastY) {\n            e.preventDefault();\n        }\n        lastY = y;\n    };\n    let onTouchEnd = (e)=>{\n        let target = e.target;\n        // Apply this change if we're not already focused on the target element\n        if (isInput(target) && target !== document.activeElement) {\n            e.preventDefault();\n            // Apply a transform to trick Safari into thinking the input is at the top of the page\n            // so it doesn't try to scroll it into view. When tapping on an input, this needs to\n            // be done before the \"focus\" event, so we have to focus the element ourselves.\n            target.style.transform = \"translateY(-2000px)\";\n            target.focus();\n            requestAnimationFrame(()=>{\n                target.style.transform = \"\";\n            });\n        }\n    };\n    let onFocus = (e)=>{\n        let target = e.target;\n        if (isInput(target)) {\n            // Transform also needs to be applied in the focus event in cases where focus moves\n            // other than tapping on an input directly, e.g. the next/previous buttons in the\n            // software keyboard. In these cases, it seems applying the transform in the focus event\n            // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️\n            target.style.transform = \"translateY(-2000px)\";\n            requestAnimationFrame(()=>{\n                target.style.transform = \"\";\n                // This will have prevented the browser from scrolling the focused element into view,\n                // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.\n                if (visualViewport) {\n                    if (visualViewport.height < window.innerHeight) {\n                        // If the keyboard is already visible, do this after one additional frame\n                        // to wait for the transform to be removed.\n                        requestAnimationFrame(()=>{\n                            scrollIntoView(target);\n                        });\n                    } else {\n                        // Otherwise, wait for the visual viewport to resize before scrolling so we can\n                        // measure the correct position to scroll to.\n                        visualViewport.addEventListener(\"resize\", ()=>scrollIntoView(target), {\n                            once: true\n                        });\n                    }\n                }\n            });\n        }\n    };\n    let onWindowScroll = ()=>{\n        // Last resort. If the window scrolled, scroll it back to the top.\n        // It should always be at the top because the body will have a negative margin (see below).\n        window.scrollTo(0, 0);\n    };\n    // Record the original scroll position so we can restore it.\n    // Then apply a negative margin to the body to offset it by the scroll position. This will\n    // enable us to scroll the window to the top, which is required for the rest of this to work.\n    let scrollX = window.pageXOffset;\n    let scrollY = window.pageYOffset;\n    let restoreStyles = chain$1(setStyle(document.documentElement, \"paddingRight\", `${window.innerWidth - document.documentElement.clientWidth}px`));\n    // Scroll to the top. The negative margin on the body will make this appear the same.\n    window.scrollTo(0, 0);\n    let removeEvents = chain$1(addEvent(document, \"touchstart\", onTouchStart, {\n        passive: false,\n        capture: true\n    }), addEvent(document, \"touchmove\", onTouchMove, {\n        passive: false,\n        capture: true\n    }), addEvent(document, \"touchend\", onTouchEnd, {\n        passive: false,\n        capture: true\n    }), addEvent(document, \"focus\", onFocus, true), addEvent(window, \"scroll\", onWindowScroll));\n    return ()=>{\n        // Restore styles and scroll the page back to where it was.\n        restoreStyles();\n        removeEvents();\n        window.scrollTo(scrollX, scrollY);\n    };\n}\n// Sets a CSS property on an element, and returns a function to revert it to the previous value.\nfunction setStyle(element, style, value) {\n    let cur = element.style[style];\n    element.style[style] = value;\n    return ()=>{\n        element.style[style] = cur;\n    };\n}\n// Adds an event listener to an element, and returns a function to remove it.\nfunction addEvent(target, event, handler, options) {\n    // @ts-ignore\n    target.addEventListener(event, handler, options);\n    return ()=>{\n        // @ts-ignore\n        target.removeEventListener(event, handler, options);\n    };\n}\nfunction scrollIntoView(target) {\n    let root = document.scrollingElement || document.documentElement;\n    while(target && target !== root){\n        // Find the parent scrollable element and adjust the scroll position if the target is not already in view.\n        let scrollable = getScrollParent(target);\n        if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {\n            let scrollableTop = scrollable.getBoundingClientRect().top;\n            let targetTop = target.getBoundingClientRect().top;\n            let targetBottom = target.getBoundingClientRect().bottom;\n            const keyboardHeight = scrollable.getBoundingClientRect().bottom;\n            if (targetBottom > keyboardHeight) {\n                scrollable.scrollTop += targetTop - scrollableTop;\n            }\n        }\n        // @ts-ignore\n        target = scrollable.parentElement;\n    }\n}\nfunction isInput(target) {\n    return target instanceof HTMLInputElement && !nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;\n}\n// This code comes from https://github.com/radix-ui/primitives/tree/main/packages/react/compose-refs\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */ function setRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref !== null && ref !== undefined) {\n        ref.current = value;\n    }\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */ function composeRefs(...refs) {\n    return (node)=>refs.forEach((ref)=>setRef(ref, node));\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */ function useComposedRefs(...refs) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(composeRefs(...refs), refs);\n}\nconst cache = new WeakMap();\nfunction set(el, styles, ignoreCache = false) {\n    if (!el || !(el instanceof HTMLElement)) return;\n    let originalStyles = {};\n    Object.entries(styles).forEach(([key, value])=>{\n        if (key.startsWith(\"--\")) {\n            el.style.setProperty(key, value);\n            return;\n        }\n        originalStyles[key] = el.style[key];\n        el.style[key] = value;\n    });\n    if (ignoreCache) return;\n    cache.set(el, originalStyles);\n}\nfunction reset(el, prop) {\n    if (!el || !(el instanceof HTMLElement)) return;\n    let originalStyles = cache.get(el);\n    if (!originalStyles) {\n        return;\n    }\n    {\n        el.style[prop] = originalStyles[prop];\n    }\n}\nconst isVertical = (direction)=>{\n    switch(direction){\n        case \"top\":\n        case \"bottom\":\n            return true;\n        case \"left\":\n        case \"right\":\n            return false;\n        default:\n            return direction;\n    }\n};\nfunction getTranslate(element, direction) {\n    if (!element) {\n        return null;\n    }\n    const style = window.getComputedStyle(element);\n    const transform = style.transform || style.webkitTransform || style.mozTransform;\n    let mat = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (mat) {\n        // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n        return parseFloat(mat[1].split(\", \")[isVertical(direction) ? 13 : 12]);\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n    mat = transform.match(/^matrix\\((.+)\\)$/);\n    return mat ? parseFloat(mat[1].split(\", \")[isVertical(direction) ? 5 : 4]) : null;\n}\nfunction dampenValue(v) {\n    return 8 * (Math.log(v + 1) - 2);\n}\nfunction assignStyle(element, style) {\n    if (!element) return ()=>{};\n    const prevStyle = element.style.cssText;\n    Object.assign(element.style, style);\n    return ()=>{\n        element.style.cssText = prevStyle;\n    };\n}\n/**\n * Receives functions as arguments and returns a new function that calls all.\n */ function chain(...fns) {\n    return (...args)=>{\n        for (const fn of fns){\n            if (typeof fn === \"function\") {\n                // @ts-ignore\n                fn(...args);\n            }\n        }\n    };\n}\nconst TRANSITIONS = {\n    DURATION: 0.5,\n    EASE: [\n        0.32,\n        0.72,\n        0,\n        1\n    ]\n};\nconst VELOCITY_THRESHOLD = 0.4;\nconst CLOSE_THRESHOLD = 0.25;\nconst SCROLL_LOCK_TIMEOUT = 100;\nconst BORDER_RADIUS = 8;\nconst NESTED_DISPLACEMENT = 16;\nconst WINDOW_TOP_OFFSET = 26;\nconst DRAG_CLASS = \"vaul-dragging\";\n// This code comes from https://github.com/radix-ui/primitives/blob/main/packages/react/use-controllable-state/src/useControllableState.tsx\nfunction useCallbackRef(callback) {\n    const callbackRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(callback);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        callbackRef.current = callback;\n    });\n    // https://github.com/facebook/react/issues/19240\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(...args)=>callbackRef.current == null ? void 0 : callbackRef.current.call(callbackRef, ...args), []);\n}\nfunction useUncontrolledState({ defaultProp, onChange }) {\n    const uncontrolledState = react__WEBPACK_IMPORTED_MODULE_0__.useState(defaultProp);\n    const [value] = uncontrolledState;\n    const prevValueRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(value);\n    const handleChange = useCallbackRef(onChange);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (prevValueRef.current !== value) {\n            handleChange(value);\n            prevValueRef.current = value;\n        }\n    }, [\n        value,\n        prevValueRef,\n        handleChange\n    ]);\n    return uncontrolledState;\n}\nfunction useControllableState({ prop, defaultProp, onChange = ()=>{} }) {\n    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n        defaultProp,\n        onChange\n    });\n    const isControlled = prop !== undefined;\n    const value = isControlled ? prop : uncontrolledProp;\n    const handleChange = useCallbackRef(onChange);\n    const setValue = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((nextValue)=>{\n        if (isControlled) {\n            const setter = nextValue;\n            const value = typeof nextValue === \"function\" ? setter(prop) : nextValue;\n            if (value !== prop) handleChange(value);\n        } else {\n            setUncontrolledProp(nextValue);\n        }\n    }, [\n        isControlled,\n        prop,\n        setUncontrolledProp,\n        handleChange\n    ]);\n    return [\n        value,\n        setValue\n    ];\n}\nfunction useSnapPoints({ activeSnapPointProp, setActiveSnapPointProp, snapPoints, drawerRef, overlayRef, fadeFromIndex, onSnapPointChange, direction = \"bottom\", container, snapToSequentialPoint }) {\n    const [activeSnapPoint, setActiveSnapPoint] = useControllableState({\n        prop: activeSnapPointProp,\n        defaultProp: snapPoints == null ? void 0 : snapPoints[0],\n        onChange: setActiveSnapPointProp\n    });\n    const [windowDimensions, setWindowDimensions] = react__WEBPACK_IMPORTED_MODULE_0__.useState( false ? 0 : undefined);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        function onResize() {\n            setWindowDimensions({\n                innerWidth: window.innerWidth,\n                innerHeight: window.innerHeight\n            });\n        }\n        window.addEventListener(\"resize\", onResize);\n        return ()=>window.removeEventListener(\"resize\", onResize);\n    }, []);\n    const isLastSnapPoint = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>activeSnapPoint === (snapPoints == null ? void 0 : snapPoints[snapPoints.length - 1]) || null, [\n        snapPoints,\n        activeSnapPoint\n    ]);\n    const activeSnapPointIndex = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>snapPoints == null ? void 0 : snapPoints.findIndex((snapPoint)=>snapPoint === activeSnapPoint), [\n        snapPoints,\n        activeSnapPoint\n    ]);\n    const shouldFade = snapPoints && snapPoints.length > 0 && (fadeFromIndex || fadeFromIndex === 0) && !Number.isNaN(fadeFromIndex) && snapPoints[fadeFromIndex] === activeSnapPoint || !snapPoints;\n    const snapPointsOffset = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const containerSize = container ? {\n            width: container.getBoundingClientRect().width,\n            height: container.getBoundingClientRect().height\n        } :  false ? 0 : {\n            width: 0,\n            height: 0\n        };\n        var _snapPoints_map;\n        return (_snapPoints_map = snapPoints == null ? void 0 : snapPoints.map((snapPoint)=>{\n            const isPx = typeof snapPoint === \"string\";\n            let snapPointAsNumber = 0;\n            if (isPx) {\n                snapPointAsNumber = parseInt(snapPoint, 10);\n            }\n            if (isVertical(direction)) {\n                const height = isPx ? snapPointAsNumber : windowDimensions ? snapPoint * containerSize.height : 0;\n                if (windowDimensions) {\n                    return direction === \"bottom\" ? containerSize.height - height : -containerSize.height + height;\n                }\n                return height;\n            }\n            const width = isPx ? snapPointAsNumber : windowDimensions ? snapPoint * containerSize.width : 0;\n            if (windowDimensions) {\n                return direction === \"right\" ? containerSize.width - width : -containerSize.width + width;\n            }\n            return width;\n        })) != null ? _snapPoints_map : [];\n    }, [\n        snapPoints,\n        windowDimensions,\n        container\n    ]);\n    const activeSnapPointOffset = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>activeSnapPointIndex !== null ? snapPointsOffset == null ? void 0 : snapPointsOffset[activeSnapPointIndex] : null, [\n        snapPointsOffset,\n        activeSnapPointIndex\n    ]);\n    const snapToPoint = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((dimension)=>{\n        var _snapPointsOffset_findIndex;\n        const newSnapPointIndex = (_snapPointsOffset_findIndex = snapPointsOffset == null ? void 0 : snapPointsOffset.findIndex((snapPointDim)=>snapPointDim === dimension)) != null ? _snapPointsOffset_findIndex : null;\n        onSnapPointChange(newSnapPointIndex);\n        set(drawerRef.current, {\n            transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`,\n            transform: isVertical(direction) ? `translate3d(0, ${dimension}px, 0)` : `translate3d(${dimension}px, 0, 0)`\n        });\n        if (snapPointsOffset && newSnapPointIndex !== snapPointsOffset.length - 1 && newSnapPointIndex !== fadeFromIndex && newSnapPointIndex < fadeFromIndex) {\n            set(overlayRef.current, {\n                transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`,\n                opacity: \"0\"\n            });\n        } else {\n            set(overlayRef.current, {\n                transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`,\n                opacity: \"1\"\n            });\n        }\n        setActiveSnapPoint(snapPoints == null ? void 0 : snapPoints[Math.max(newSnapPointIndex, 0)]);\n    }, [\n        drawerRef.current,\n        snapPoints,\n        snapPointsOffset,\n        fadeFromIndex,\n        overlayRef,\n        setActiveSnapPoint\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (activeSnapPoint || activeSnapPointProp) {\n            var _snapPoints_findIndex;\n            const newIndex = (_snapPoints_findIndex = snapPoints == null ? void 0 : snapPoints.findIndex((snapPoint)=>snapPoint === activeSnapPointProp || snapPoint === activeSnapPoint)) != null ? _snapPoints_findIndex : -1;\n            if (snapPointsOffset && newIndex !== -1 && typeof snapPointsOffset[newIndex] === \"number\") {\n                snapToPoint(snapPointsOffset[newIndex]);\n            }\n        }\n    }, [\n        activeSnapPoint,\n        activeSnapPointProp,\n        snapPoints,\n        snapPointsOffset,\n        snapToPoint\n    ]);\n    function onRelease({ draggedDistance, closeDrawer, velocity, dismissible }) {\n        if (fadeFromIndex === undefined) return;\n        const currentPosition = direction === \"bottom\" || direction === \"right\" ? (activeSnapPointOffset != null ? activeSnapPointOffset : 0) - draggedDistance : (activeSnapPointOffset != null ? activeSnapPointOffset : 0) + draggedDistance;\n        const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n        const isFirst = activeSnapPointIndex === 0;\n        const hasDraggedUp = draggedDistance > 0;\n        if (isOverlaySnapPoint) {\n            set(overlayRef.current, {\n                transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`\n            });\n        }\n        if (!snapToSequentialPoint && velocity > 2 && !hasDraggedUp) {\n            if (dismissible) closeDrawer();\n            else snapToPoint(snapPointsOffset[0]); // snap to initial point\n            return;\n        }\n        if (!snapToSequentialPoint && velocity > 2 && hasDraggedUp && snapPointsOffset && snapPoints) {\n            snapToPoint(snapPointsOffset[snapPoints.length - 1]);\n            return;\n        }\n        // Find the closest snap point to the current position\n        const closestSnapPoint = snapPointsOffset == null ? void 0 : snapPointsOffset.reduce((prev, curr)=>{\n            if (typeof prev !== \"number\" || typeof curr !== \"number\") return prev;\n            return Math.abs(curr - currentPosition) < Math.abs(prev - currentPosition) ? curr : prev;\n        });\n        const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n        if (velocity > VELOCITY_THRESHOLD && Math.abs(draggedDistance) < dim * 0.4) {\n            const dragDirection = hasDraggedUp ? 1 : -1; // 1 = up, -1 = down\n            // Don't do anything if we swipe upwards while being on the last snap point\n            if (dragDirection > 0 && isLastSnapPoint) {\n                snapToPoint(snapPointsOffset[snapPoints.length - 1]);\n                return;\n            }\n            if (isFirst && dragDirection < 0 && dismissible) {\n                closeDrawer();\n            }\n            if (activeSnapPointIndex === null) return;\n            snapToPoint(snapPointsOffset[activeSnapPointIndex + dragDirection]);\n            return;\n        }\n        snapToPoint(closestSnapPoint);\n    }\n    function onDrag({ draggedDistance }) {\n        if (activeSnapPointOffset === null) return;\n        const newValue = direction === \"bottom\" || direction === \"right\" ? activeSnapPointOffset - draggedDistance : activeSnapPointOffset + draggedDistance;\n        // Don't do anything if we exceed the last(biggest) snap point\n        if ((direction === \"bottom\" || direction === \"right\") && newValue < snapPointsOffset[snapPointsOffset.length - 1]) {\n            return;\n        }\n        if ((direction === \"top\" || direction === \"left\") && newValue > snapPointsOffset[snapPointsOffset.length - 1]) {\n            return;\n        }\n        set(drawerRef.current, {\n            transform: isVertical(direction) ? `translate3d(0, ${newValue}px, 0)` : `translate3d(${newValue}px, 0, 0)`\n        });\n    }\n    function getPercentageDragged(absDraggedDistance, isDraggingDown) {\n        if (!snapPoints || typeof activeSnapPointIndex !== \"number\" || !snapPointsOffset || fadeFromIndex === undefined) return null;\n        // If this is true we are dragging to a snap point that is supposed to have an overlay\n        const isOverlaySnapPoint = activeSnapPointIndex === fadeFromIndex - 1;\n        const isOverlaySnapPointOrHigher = activeSnapPointIndex >= fadeFromIndex;\n        if (isOverlaySnapPointOrHigher && isDraggingDown) {\n            return 0;\n        }\n        // Don't animate, but still use this one if we are dragging away from the overlaySnapPoint\n        if (isOverlaySnapPoint && !isDraggingDown) return 1;\n        if (!shouldFade && !isOverlaySnapPoint) return null;\n        // Either fadeFrom index or the one before\n        const targetSnapPointIndex = isOverlaySnapPoint ? activeSnapPointIndex + 1 : activeSnapPointIndex - 1;\n        // Get the distance from overlaySnapPoint to the one before or vice-versa to calculate the opacity percentage accordingly\n        const snapPointDistance = isOverlaySnapPoint ? snapPointsOffset[targetSnapPointIndex] - snapPointsOffset[targetSnapPointIndex - 1] : snapPointsOffset[targetSnapPointIndex + 1] - snapPointsOffset[targetSnapPointIndex];\n        const percentageDragged = absDraggedDistance / Math.abs(snapPointDistance);\n        if (isOverlaySnapPoint) {\n            return 1 - percentageDragged;\n        } else {\n            return percentageDragged;\n        }\n    }\n    return {\n        isLastSnapPoint,\n        activeSnapPoint,\n        shouldFade,\n        getPercentageDragged,\n        setActiveSnapPoint,\n        activeSnapPointIndex,\n        onRelease,\n        onDrag,\n        snapPointsOffset\n    };\n}\nconst noop = ()=>()=>{};\nfunction useScaleBackground() {\n    const { direction, isOpen, shouldScaleBackground, setBackgroundColorOnScale, noBodyStyles } = useDrawerContext();\n    const timeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const initialBackgroundColor = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>document.body.style.backgroundColor, []);\n    function getScale() {\n        return (window.innerWidth - WINDOW_TOP_OFFSET) / window.innerWidth;\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (isOpen && shouldScaleBackground) {\n            if (timeoutIdRef.current) clearTimeout(timeoutIdRef.current);\n            const wrapper = document.querySelector(\"[data-vaul-drawer-wrapper]\") || document.querySelector(\"[vaul-drawer-wrapper]\");\n            if (!wrapper) return;\n            const bodyAndWrapperCleanup = chain(setBackgroundColorOnScale && !noBodyStyles ? assignStyle(document.body, {\n                background: \"black\"\n            }) : noop, assignStyle(wrapper, {\n                transformOrigin: isVertical(direction) ? \"top\" : \"left\",\n                transitionProperty: \"transform, border-radius\",\n                transitionDuration: `${TRANSITIONS.DURATION}s`,\n                transitionTimingFunction: `cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`\n            }));\n            const wrapperStylesCleanup = assignStyle(wrapper, {\n                borderRadius: `${BORDER_RADIUS}px`,\n                overflow: \"hidden\",\n                ...isVertical(direction) ? {\n                    transform: `scale(${getScale()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`\n                } : {\n                    transform: `scale(${getScale()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`\n                }\n            });\n            return ()=>{\n                wrapperStylesCleanup();\n                timeoutIdRef.current = window.setTimeout(()=>{\n                    bodyAndWrapperCleanup();\n                    if (initialBackgroundColor) {\n                        document.body.style.background = initialBackgroundColor;\n                    } else {\n                        document.body.style.removeProperty(\"background\");\n                    }\n                }, TRANSITIONS.DURATION * 1000);\n            };\n        }\n    }, [\n        isOpen,\n        shouldScaleBackground,\n        initialBackgroundColor\n    ]);\n}\nfunction Root({ open: openProp, onOpenChange, children, onDrag: onDragProp, onRelease: onReleaseProp, snapPoints, shouldScaleBackground = false, setBackgroundColorOnScale = true, closeThreshold = CLOSE_THRESHOLD, scrollLockTimeout = SCROLL_LOCK_TIMEOUT, dismissible = true, handleOnly = false, fadeFromIndex = snapPoints && snapPoints.length - 1, activeSnapPoint: activeSnapPointProp, setActiveSnapPoint: setActiveSnapPointProp, fixed, modal = true, onClose, noBodyStyles, direction = \"bottom\", defaultOpen = false, disablePreventScroll = true, snapToSequentialPoint = false, repositionInputs = true, onAnimationEnd, container }) {\n    var _drawerRef_current;\n    const [isOpen = false, setIsOpen] = useControllableState({\n        defaultProp: defaultOpen,\n        prop: openProp,\n        onChange: (o)=>{\n            onOpenChange == null ? void 0 : onOpenChange(o);\n            setTimeout(()=>{\n                onAnimationEnd == null ? void 0 : onAnimationEnd(o);\n            }, TRANSITIONS.DURATION * 1000);\n            if (o && !modal) {\n                window.requestAnimationFrame(()=>{\n                    document.body.style.pointerEvents = \"auto\";\n                });\n            }\n        }\n    });\n    const [hasBeenOpened, setHasBeenOpened] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [isDragging, setIsDragging] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [justReleased, setJustReleased] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const overlayRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const openTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const dragStartTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const dragEndTime = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const lastTimeDragPrevented = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const isAllowedToDrag = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const nestedOpenChangeTimer = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const pointerStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const keyboardIsOpen = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const previousDiffFromInitial = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const drawerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const drawerHeightRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(((_drawerRef_current = drawerRef.current) == null ? void 0 : _drawerRef_current.getBoundingClientRect().height) || 0);\n    const initialDrawerHeight = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    const onSnapPointChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((activeSnapPointIndex)=>{\n        // Change openTime ref when we reach the last snap point to prevent dragging for 500ms incase it's scrollable.\n        if (snapPoints && activeSnapPointIndex === snapPointsOffset.length - 1) openTime.current = new Date();\n    }, []);\n    const { activeSnapPoint, activeSnapPointIndex, setActiveSnapPoint, onRelease: onReleaseSnapPoints, snapPointsOffset, onDrag: onDragSnapPoints, shouldFade, getPercentageDragged: getSnapPointsPercentageDragged } = useSnapPoints({\n        snapPoints,\n        activeSnapPointProp,\n        setActiveSnapPointProp,\n        drawerRef,\n        fadeFromIndex,\n        overlayRef,\n        onSnapPointChange,\n        direction,\n        container,\n        snapToSequentialPoint\n    });\n    usePreventScroll({\n        isDisabled: !isOpen || isDragging || !modal || justReleased || !hasBeenOpened || !repositionInputs || !disablePreventScroll\n    });\n    function getScale() {\n        return (window.innerWidth - WINDOW_TOP_OFFSET) / window.innerWidth;\n    }\n    function onPress(event) {\n        var _drawerRef_current;\n        if (!dismissible && !snapPoints) return;\n        if (drawerRef.current && !drawerRef.current.contains(event.target)) return;\n        drawerHeightRef.current = ((_drawerRef_current = drawerRef.current) == null ? void 0 : _drawerRef_current.getBoundingClientRect().height) || 0;\n        setIsDragging(true);\n        dragStartTime.current = new Date();\n        // iOS doesn't trigger mouseUp after scrolling so we need to listen to touched in order to disallow dragging\n        if (isIOS()) {\n            window.addEventListener(\"touchend\", ()=>isAllowedToDrag.current = false, {\n                once: true\n            });\n        }\n        // Ensure we maintain correct pointer capture even when going outside of the drawer\n        event.target.setPointerCapture(event.pointerId);\n        pointerStart.current = isVertical(direction) ? event.clientY : event.clientX;\n    }\n    function shouldDrag(el, isDraggingInDirection) {\n        var _window_getSelection, _lastTimeDragPrevented_current;\n        let element = el;\n        const highlightedText = (_window_getSelection = window.getSelection()) == null ? void 0 : _window_getSelection.toString();\n        const swipeAmount = drawerRef.current ? getTranslate(drawerRef.current, direction) : null;\n        const date = new Date();\n        if (element.hasAttribute(\"data-vaul-no-drag\") || element.closest(\"[data-vaul-no-drag]\")) {\n            return false;\n        }\n        if (direction === \"right\" || direction === \"left\") {\n            return true;\n        }\n        // Allow scrolling when animating\n        if (openTime.current && date.getTime() - openTime.current.getTime() < 500) {\n            return false;\n        }\n        if (swipeAmount !== null) {\n            if (direction === \"bottom\" ? swipeAmount > 0 : swipeAmount < 0) {\n                return true;\n            }\n        }\n        // Don't drag if there's highlighted text\n        if (highlightedText && highlightedText.length > 0) {\n            return false;\n        }\n        // Disallow dragging if drawer was scrolled within `scrollLockTimeout`\n        if (date.getTime() - ((_lastTimeDragPrevented_current = lastTimeDragPrevented.current) == null ? void 0 : _lastTimeDragPrevented_current.getTime()) < scrollLockTimeout && swipeAmount === 0) {\n            lastTimeDragPrevented.current = date;\n            return false;\n        }\n        if (isDraggingInDirection) {\n            lastTimeDragPrevented.current = date;\n            // We are dragging down so we should allow scrolling\n            return false;\n        }\n        // Keep climbing up the DOM tree as long as there's a parent\n        while(element){\n            // Check if the element is scrollable\n            if (element.scrollHeight > element.clientHeight) {\n                if (element.scrollTop !== 0) {\n                    lastTimeDragPrevented.current = new Date();\n                    // The element is scrollable and not scrolled to the top, so don't drag\n                    return false;\n                }\n                if (element.getAttribute(\"role\") === \"dialog\") {\n                    return true;\n                }\n            }\n            // Move up to the parent element\n            element = element.parentNode;\n        }\n        // No scrollable parents not scrolled to the top found, so drag\n        return true;\n    }\n    function onDrag(event) {\n        if (!drawerRef.current) {\n            return;\n        }\n        // We need to know how much of the drawer has been dragged in percentages so that we can transform background accordingly\n        if (isDragging) {\n            const directionMultiplier = direction === \"bottom\" || direction === \"right\" ? 1 : -1;\n            const draggedDistance = (pointerStart.current - (isVertical(direction) ? event.clientY : event.clientX)) * directionMultiplier;\n            const isDraggingInDirection = draggedDistance > 0;\n            // Pre condition for disallowing dragging in the close direction.\n            const noCloseSnapPointsPreCondition = snapPoints && !dismissible && !isDraggingInDirection;\n            // Disallow dragging down to close when first snap point is the active one and dismissible prop is set to false.\n            if (noCloseSnapPointsPreCondition && activeSnapPointIndex === 0) return;\n            // We need to capture last time when drag with scroll was triggered and have a timeout between\n            const absDraggedDistance = Math.abs(draggedDistance);\n            const wrapper = document.querySelector(\"[data-vaul-drawer-wrapper]\");\n            // Calculate the percentage dragged, where 1 is the closed position\n            let percentageDragged = absDraggedDistance / drawerHeightRef.current;\n            const snapPointPercentageDragged = getSnapPointsPercentageDragged(absDraggedDistance, isDraggingInDirection);\n            if (snapPointPercentageDragged !== null) {\n                percentageDragged = snapPointPercentageDragged;\n            }\n            // Disallow close dragging beyond the smallest snap point.\n            if (noCloseSnapPointsPreCondition && percentageDragged >= 1) {\n                return;\n            }\n            if (!isAllowedToDrag.current && !shouldDrag(event.target, isDraggingInDirection)) return;\n            drawerRef.current.classList.add(DRAG_CLASS);\n            // If shouldDrag gave true once after pressing down on the drawer, we set isAllowedToDrag to true and it will remain true until we let go, there's no reason to disable dragging mid way, ever, and that's the solution to it\n            isAllowedToDrag.current = true;\n            set(drawerRef.current, {\n                transition: \"none\"\n            });\n            set(overlayRef.current, {\n                transition: \"none\"\n            });\n            if (snapPoints) {\n                onDragSnapPoints({\n                    draggedDistance\n                });\n            }\n            // Run this only if snapPoints are not defined or if we are at the last snap point (highest one)\n            if (isDraggingInDirection && !snapPoints) {\n                const dampenedDraggedDistance = dampenValue(draggedDistance);\n                const translateValue = Math.min(dampenedDraggedDistance * -1, 0) * directionMultiplier;\n                set(drawerRef.current, {\n                    transform: isVertical(direction) ? `translate3d(0, ${translateValue}px, 0)` : `translate3d(${translateValue}px, 0, 0)`\n                });\n                return;\n            }\n            const opacityValue = 1 - percentageDragged;\n            if (shouldFade || fadeFromIndex && activeSnapPointIndex === fadeFromIndex - 1) {\n                onDragProp == null ? void 0 : onDragProp(event, percentageDragged);\n                set(overlayRef.current, {\n                    opacity: `${opacityValue}`,\n                    transition: \"none\"\n                }, true);\n            }\n            if (wrapper && overlayRef.current && shouldScaleBackground) {\n                // Calculate percentageDragged as a fraction (0 to 1)\n                const scaleValue = Math.min(getScale() + percentageDragged * (1 - getScale()), 1);\n                const borderRadiusValue = 8 - percentageDragged * 8;\n                const translateValue = Math.max(0, 14 - percentageDragged * 14);\n                set(wrapper, {\n                    borderRadius: `${borderRadiusValue}px`,\n                    transform: isVertical(direction) ? `scale(${scaleValue}) translate3d(0, ${translateValue}px, 0)` : `scale(${scaleValue}) translate3d(${translateValue}px, 0, 0)`,\n                    transition: \"none\"\n                }, true);\n            }\n            if (!snapPoints) {\n                const translateValue = absDraggedDistance * directionMultiplier;\n                set(drawerRef.current, {\n                    transform: isVertical(direction) ? `translate3d(0, ${translateValue}px, 0)` : `translate3d(${translateValue}px, 0, 0)`\n                });\n            }\n        }\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _window_visualViewport;\n        function onVisualViewportChange() {\n            if (!drawerRef.current) return;\n            const focusedElement = document.activeElement;\n            if (isInput(focusedElement) || keyboardIsOpen.current) {\n                var _window_visualViewport;\n                const visualViewportHeight = ((_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.height) || 0;\n                // This is the height of the keyboard\n                let diffFromInitial = window.innerHeight - visualViewportHeight;\n                const drawerHeight = drawerRef.current.getBoundingClientRect().height || 0;\n                if (!initialDrawerHeight.current) {\n                    initialDrawerHeight.current = drawerHeight;\n                }\n                const offsetFromTop = drawerRef.current.getBoundingClientRect().top;\n                // visualViewport height may change due to some subtle changes to the keyboard. Checking if the height changed by 60 or more will make sure that they keyboard really changed its open state.\n                if (Math.abs(previousDiffFromInitial.current - diffFromInitial) > 60) {\n                    keyboardIsOpen.current = !keyboardIsOpen.current;\n                }\n                if (snapPoints && snapPoints.length > 0 && snapPointsOffset && activeSnapPointIndex) {\n                    const activeSnapPointHeight = snapPointsOffset[activeSnapPointIndex] || 0;\n                    diffFromInitial += activeSnapPointHeight;\n                }\n                previousDiffFromInitial.current = diffFromInitial;\n                // We don't have to change the height if the input is in view, when we are here we are in the opened keyboard state so we can correctly check if the input is in view\n                if (drawerHeight > visualViewportHeight || keyboardIsOpen.current) {\n                    const height = drawerRef.current.getBoundingClientRect().height;\n                    let newDrawerHeight = height;\n                    if (height > visualViewportHeight) {\n                        newDrawerHeight = visualViewportHeight - WINDOW_TOP_OFFSET;\n                    }\n                    // When fixed, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open\n                    if (fixed) {\n                        drawerRef.current.style.height = `${height - Math.max(diffFromInitial, 0)}px`;\n                    } else {\n                        drawerRef.current.style.height = `${Math.max(newDrawerHeight, visualViewportHeight - offsetFromTop)}px`;\n                    }\n                } else {\n                    drawerRef.current.style.height = `${initialDrawerHeight.current}px`;\n                }\n                if (snapPoints && snapPoints.length > 0 && !keyboardIsOpen.current) {\n                    drawerRef.current.style.bottom = `0px`;\n                } else {\n                    // Negative bottom value would never make sense\n                    drawerRef.current.style.bottom = `${Math.max(diffFromInitial, 0)}px`;\n                }\n            }\n        }\n        (_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.addEventListener(\"resize\", onVisualViewportChange);\n        return ()=>{\n            var _window_visualViewport;\n            return (_window_visualViewport = window.visualViewport) == null ? void 0 : _window_visualViewport.removeEventListener(\"resize\", onVisualViewportChange);\n        };\n    }, [\n        activeSnapPointIndex,\n        snapPoints,\n        snapPointsOffset\n    ]);\n    function closeDrawer(fromWithin) {\n        cancelDrag();\n        onClose == null ? void 0 : onClose();\n        if (!fromWithin) {\n            setIsOpen(false);\n        }\n        setTimeout(()=>{\n            if (snapPoints) {\n                setActiveSnapPoint(snapPoints[0]);\n            }\n        }, TRANSITIONS.DURATION * 1000); // seconds to ms\n    }\n    function resetDrawer() {\n        if (!drawerRef.current) return;\n        const wrapper = document.querySelector(\"[data-vaul-drawer-wrapper]\");\n        const currentSwipeAmount = getTranslate(drawerRef.current, direction);\n        set(drawerRef.current, {\n            transform: \"translate3d(0, 0, 0)\",\n            transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`\n        });\n        set(overlayRef.current, {\n            transition: `opacity ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`,\n            opacity: \"1\"\n        });\n        // Don't reset background if swiped upwards\n        if (shouldScaleBackground && currentSwipeAmount && currentSwipeAmount > 0 && isOpen) {\n            set(wrapper, {\n                borderRadius: `${BORDER_RADIUS}px`,\n                overflow: \"hidden\",\n                ...isVertical(direction) ? {\n                    transform: `scale(${getScale()}) translate3d(0, calc(env(safe-area-inset-top) + 14px), 0)`,\n                    transformOrigin: \"top\"\n                } : {\n                    transform: `scale(${getScale()}) translate3d(calc(env(safe-area-inset-top) + 14px), 0, 0)`,\n                    transformOrigin: \"left\"\n                },\n                transitionProperty: \"transform, border-radius\",\n                transitionDuration: `${TRANSITIONS.DURATION}s`,\n                transitionTimingFunction: `cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`\n            }, true);\n        }\n    }\n    function cancelDrag() {\n        if (!isDragging || !drawerRef.current) return;\n        drawerRef.current.classList.remove(DRAG_CLASS);\n        isAllowedToDrag.current = false;\n        setIsDragging(false);\n        dragEndTime.current = new Date();\n    }\n    function onRelease(event) {\n        if (!isDragging || !drawerRef.current) return;\n        drawerRef.current.classList.remove(DRAG_CLASS);\n        isAllowedToDrag.current = false;\n        setIsDragging(false);\n        dragEndTime.current = new Date();\n        const swipeAmount = getTranslate(drawerRef.current, direction);\n        if (!shouldDrag(event.target, false) || !swipeAmount || Number.isNaN(swipeAmount)) return;\n        if (dragStartTime.current === null) return;\n        const timeTaken = dragEndTime.current.getTime() - dragStartTime.current.getTime();\n        const distMoved = pointerStart.current - (isVertical(direction) ? event.clientY : event.clientX);\n        const velocity = Math.abs(distMoved) / timeTaken;\n        if (velocity > 0.05) {\n            // `justReleased` is needed to prevent the drawer from focusing on an input when the drag ends, as it's not the intent most of the time.\n            setJustReleased(true);\n            setTimeout(()=>{\n                setJustReleased(false);\n            }, 200);\n        }\n        if (snapPoints) {\n            const directionMultiplier = direction === \"bottom\" || direction === \"right\" ? 1 : -1;\n            onReleaseSnapPoints({\n                draggedDistance: distMoved * directionMultiplier,\n                closeDrawer,\n                velocity,\n                dismissible\n            });\n            onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n            return;\n        }\n        // Moved upwards, don't do anything\n        if (direction === \"bottom\" || direction === \"right\" ? distMoved > 0 : distMoved < 0) {\n            resetDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n            return;\n        }\n        if (velocity > VELOCITY_THRESHOLD) {\n            closeDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, false);\n            return;\n        }\n        var _drawerRef_current_getBoundingClientRect_height;\n        const visibleDrawerHeight = Math.min((_drawerRef_current_getBoundingClientRect_height = drawerRef.current.getBoundingClientRect().height) != null ? _drawerRef_current_getBoundingClientRect_height : 0, window.innerHeight);\n        var _drawerRef_current_getBoundingClientRect_width;\n        const visibleDrawerWidth = Math.min((_drawerRef_current_getBoundingClientRect_width = drawerRef.current.getBoundingClientRect().width) != null ? _drawerRef_current_getBoundingClientRect_width : 0, window.innerWidth);\n        const isHorizontalSwipe = direction === \"left\" || direction === \"right\";\n        if (Math.abs(swipeAmount) >= (isHorizontalSwipe ? visibleDrawerWidth : visibleDrawerHeight) * closeThreshold) {\n            closeDrawer();\n            onReleaseProp == null ? void 0 : onReleaseProp(event, false);\n            return;\n        }\n        onReleaseProp == null ? void 0 : onReleaseProp(event, true);\n        resetDrawer();\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        // Trigger enter animation without using CSS animation\n        if (isOpen) {\n            set(document.documentElement, {\n                scrollBehavior: \"auto\"\n            });\n            openTime.current = new Date();\n        }\n        return ()=>{\n            reset(document.documentElement, \"scrollBehavior\");\n        };\n    }, [\n        isOpen\n    ]);\n    function onNestedOpenChange(o) {\n        const scale = o ? (window.innerWidth - NESTED_DISPLACEMENT) / window.innerWidth : 1;\n        const y = o ? -NESTED_DISPLACEMENT : 0;\n        if (nestedOpenChangeTimer.current) {\n            window.clearTimeout(nestedOpenChangeTimer.current);\n        }\n        set(drawerRef.current, {\n            transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`,\n            transform: `scale(${scale}) translate3d(0, ${y}px, 0)`\n        });\n        if (!o && drawerRef.current) {\n            nestedOpenChangeTimer.current = setTimeout(()=>{\n                const translateValue = getTranslate(drawerRef.current, direction);\n                set(drawerRef.current, {\n                    transition: \"none\",\n                    transform: isVertical(direction) ? `translate3d(0, ${translateValue}px, 0)` : `translate3d(${translateValue}px, 0, 0)`\n                });\n            }, 500);\n        }\n    }\n    function onNestedDrag(_event, percentageDragged) {\n        if (percentageDragged < 0) return;\n        const initialDim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n        const initialScale = (initialDim - NESTED_DISPLACEMENT) / initialDim;\n        const newScale = initialScale + percentageDragged * (1 - initialScale);\n        const newTranslate = -NESTED_DISPLACEMENT + percentageDragged * NESTED_DISPLACEMENT;\n        set(drawerRef.current, {\n            transform: isVertical(direction) ? `scale(${newScale}) translate3d(0, ${newTranslate}px, 0)` : `scale(${newScale}) translate3d(${newTranslate}px, 0, 0)`,\n            transition: \"none\"\n        });\n    }\n    function onNestedRelease(_event, o) {\n        const dim = isVertical(direction) ? window.innerHeight : window.innerWidth;\n        const scale = o ? (dim - NESTED_DISPLACEMENT) / dim : 1;\n        const translate = o ? -NESTED_DISPLACEMENT : 0;\n        if (o) {\n            set(drawerRef.current, {\n                transition: `transform ${TRANSITIONS.DURATION}s cubic-bezier(${TRANSITIONS.EASE.join(\",\")})`,\n                transform: isVertical(direction) ? `scale(${scale}) translate3d(0, ${translate}px, 0)` : `scale(${scale}) translate3d(${translate}px, 0, 0)`\n            });\n        }\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Root, {\n        defaultOpen: defaultOpen,\n        onOpenChange: (open)=>{\n            if (!dismissible) return;\n            if (open) {\n                setHasBeenOpened(true);\n            } else {\n                closeDrawer(true);\n            }\n            setIsOpen(open);\n        },\n        open: isOpen\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DrawerContext.Provider, {\n        value: {\n            activeSnapPoint,\n            snapPoints,\n            setActiveSnapPoint,\n            drawerRef,\n            overlayRef,\n            onOpenChange,\n            onPress,\n            onRelease,\n            onDrag,\n            dismissible,\n            handleOnly,\n            isOpen,\n            isDragging,\n            shouldFade,\n            closeDrawer,\n            onNestedDrag,\n            onNestedOpenChange,\n            onNestedRelease,\n            keyboardIsOpen,\n            modal,\n            snapPointsOffset,\n            direction,\n            shouldScaleBackground,\n            setBackgroundColorOnScale,\n            noBodyStyles,\n            container\n        }\n    }, children));\n}\nconst Overlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ ...rest }, ref) {\n    const { overlayRef, snapPoints, onRelease, shouldFade, isOpen, modal } = useDrawerContext();\n    const composedRef = useComposedRefs(ref, overlayRef);\n    const hasSnapPoints = snapPoints && snapPoints.length > 0;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Overlay, {\n        onMouseUp: onRelease,\n        ref: composedRef,\n        \"data-vaul-overlay\": \"\",\n        \"data-vaul-snap-points\": isOpen && hasSnapPoints ? \"true\" : \"false\",\n        \"data-vaul-snap-points-overlay\": isOpen && shouldFade ? \"true\" : \"false\",\n        style: {\n            visibility: modal ? \"visible\" : \"hidden\"\n        },\n        ...rest\n    });\n});\nOverlay.displayName = \"Drawer.Overlay\";\nconst Content = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ onPointerDownOutside, style, ...rest }, ref) {\n    const { drawerRef, onPress, onRelease, onDrag, keyboardIsOpen, snapPointsOffset, modal, isOpen, direction, snapPoints, container, handleOnly } = useDrawerContext();\n    // Needed to use transition instead of animations\n    const [delayedSnapPoints, setDelayedSnapPoints] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const composedRef = useComposedRefs(ref, drawerRef);\n    const pointerStartRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const wasBeyondThePointRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const hasSnapPoints = snapPoints && snapPoints.length > 0;\n    useScaleBackground();\n    const isDeltaInDirection = (delta, direction, threshold = 0)=>{\n        if (wasBeyondThePointRef.current) return true;\n        const deltaY = Math.abs(delta.y);\n        const deltaX = Math.abs(delta.x);\n        const isDeltaX = deltaX > deltaY;\n        const dFactor = [\n            \"bottom\",\n            \"right\"\n        ].includes(direction) ? 1 : -1;\n        if (direction === \"left\" || direction === \"right\") {\n            const isReverseDirection = delta.x * dFactor < 0;\n            if (!isReverseDirection && deltaX >= 0 && deltaX <= threshold) {\n                return isDeltaX;\n            }\n        } else {\n            const isReverseDirection = delta.y * dFactor < 0;\n            if (!isReverseDirection && deltaY >= 0 && deltaY <= threshold) {\n                return !isDeltaX;\n            }\n        }\n        wasBeyondThePointRef.current = true;\n        return true;\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (hasSnapPoints) {\n            window.requestAnimationFrame(()=>{\n                setDelayedSnapPoints(true);\n            });\n        }\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Content, {\n        \"data-vaul-drawer-direction\": direction,\n        \"data-vaul-drawer\": \"\",\n        \"data-vaul-delayed-snap-points\": delayedSnapPoints ? \"true\" : \"false\",\n        \"data-vaul-snap-points\": isOpen && hasSnapPoints ? \"true\" : \"false\",\n        \"data-vaul-custom-container\": container ? \"true\" : \"false\",\n        ...rest,\n        ref: composedRef,\n        style: snapPointsOffset && snapPointsOffset.length > 0 ? {\n            \"--snap-point-height\": `${snapPointsOffset[0]}px`,\n            ...style\n        } : style,\n        onPointerDown: (event)=>{\n            if (handleOnly) return;\n            rest.onPointerDown == null ? void 0 : rest.onPointerDown.call(rest, event);\n            pointerStartRef.current = {\n                x: event.clientX,\n                y: event.clientY\n            };\n            onPress(event);\n        },\n        onPointerDownOutside: (e)=>{\n            onPointerDownOutside == null ? void 0 : onPointerDownOutside(e);\n            if (!modal || e.defaultPrevented) {\n                e.preventDefault();\n                return;\n            }\n            if (keyboardIsOpen.current) {\n                keyboardIsOpen.current = false;\n            }\n        },\n        onFocusOutside: (e)=>{\n            if (!modal) {\n                e.preventDefault();\n                return;\n            }\n        },\n        onPointerMove: (event)=>{\n            if (handleOnly) return;\n            rest.onPointerMove == null ? void 0 : rest.onPointerMove.call(rest, event);\n            if (!pointerStartRef.current) return;\n            const yPosition = event.clientY - pointerStartRef.current.y;\n            const xPosition = event.clientX - pointerStartRef.current.x;\n            const swipeStartThreshold = event.pointerType === \"touch\" ? 10 : 2;\n            const delta = {\n                x: xPosition,\n                y: yPosition\n            };\n            const isAllowedToSwipe = isDeltaInDirection(delta, direction, swipeStartThreshold);\n            if (isAllowedToSwipe) onDrag(event);\n            else if (Math.abs(xPosition) > swipeStartThreshold || Math.abs(yPosition) > swipeStartThreshold) {\n                pointerStartRef.current = null;\n            }\n        },\n        onPointerUp: (event)=>{\n            rest.onPointerUp == null ? void 0 : rest.onPointerUp.call(rest, event);\n            pointerStartRef.current = null;\n            wasBeyondThePointRef.current = false;\n            onRelease(event);\n        }\n    });\n});\nContent.displayName = \"Drawer.Content\";\nconst LONG_HANDLE_PRESS_TIMEOUT = 250;\nconst DOUBLE_TAP_TIMEOUT = 120;\nconst Handle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function({ preventCycle = false, children, ...rest }, ref) {\n    const { closeDrawer, isDragging, snapPoints, activeSnapPoint, setActiveSnapPoint, dismissible, handleOnly, isOpen, onPress, onDrag } = useDrawerContext();\n    const closeTimeoutIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const shouldCancelInteractionRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    function handleStartCycle() {\n        // Stop if this is the second click of a double click\n        if (shouldCancelInteractionRef.current) {\n            handleCancelInteraction();\n            return;\n        }\n        window.setTimeout(()=>{\n            handleCycleSnapPoints();\n        }, DOUBLE_TAP_TIMEOUT);\n    }\n    function handleCycleSnapPoints() {\n        // Prevent accidental taps while resizing drawer\n        if (isDragging || preventCycle || shouldCancelInteractionRef.current) {\n            handleCancelInteraction();\n            return;\n        }\n        // Make sure to clear the timeout id if the user releases the handle before the cancel timeout\n        handleCancelInteraction();\n        if ((!snapPoints || snapPoints.length === 0) && dismissible) {\n            closeDrawer();\n            return;\n        }\n        const isLastSnapPoint = activeSnapPoint === snapPoints[snapPoints.length - 1];\n        if (isLastSnapPoint && dismissible) {\n            closeDrawer();\n            return;\n        }\n        const currentSnapIndex = snapPoints.findIndex((point)=>point === activeSnapPoint);\n        if (currentSnapIndex === -1) return; // activeSnapPoint not found in snapPoints\n        const nextSnapPoint = snapPoints[currentSnapIndex + 1];\n        setActiveSnapPoint(nextSnapPoint);\n    }\n    function handleStartInteraction() {\n        closeTimeoutIdRef.current = window.setTimeout(()=>{\n            // Cancel click interaction on a long press\n            shouldCancelInteractionRef.current = true;\n        }, LONG_HANDLE_PRESS_TIMEOUT);\n    }\n    function handleCancelInteraction() {\n        window.clearTimeout(closeTimeoutIdRef.current);\n        shouldCancelInteractionRef.current = false;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        onClick: handleStartCycle,\n        onPointerCancel: handleCancelInteraction,\n        onPointerDown: (e)=>{\n            if (handleOnly) onPress(e);\n            handleStartInteraction();\n        },\n        onPointerMove: (e)=>{\n            if (handleOnly) onDrag(e);\n        },\n        // onPointerUp is already handled by the content component\n        ref: ref,\n        \"data-vaul-drawer-visible\": isOpen ? \"true\" : \"false\",\n        \"data-vaul-handle\": \"\",\n        \"aria-hidden\": \"true\",\n        ...rest\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        \"data-vaul-handle-hitarea\": \"\",\n        \"aria-hidden\": \"true\"\n    }, children));\n});\nHandle.displayName = \"Drawer.Handle\";\nfunction NestedRoot({ onDrag, onOpenChange, ...rest }) {\n    const { onNestedDrag, onNestedOpenChange, onNestedRelease } = useDrawerContext();\n    if (!onNestedDrag) {\n        throw new Error(\"Drawer.NestedRoot must be placed in another drawer\");\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root, {\n        nested: true,\n        onClose: ()=>{\n            onNestedOpenChange(false);\n        },\n        onDrag: (e, p)=>{\n            onNestedDrag(e, p);\n            onDrag == null ? void 0 : onDrag(e, p);\n        },\n        onOpenChange: (o)=>{\n            if (o) {\n                onNestedOpenChange(o);\n            }\n        },\n        onRelease: onNestedRelease,\n        ...rest\n    });\n}\nfunction Portal(props) {\n    const context = useDrawerContext();\n    const { container = context.container, ...portalProps } = props;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Portal, {\n        container: container,\n        ...portalProps\n    });\n}\nconst Drawer = {\n    Root,\n    NestedRoot,\n    Content,\n    Overlay,\n    Trigger: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Trigger,\n    Portal,\n    Handle,\n    Close: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Close,\n    Title: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Title,\n    Description: _radix_ui_react_dialog__WEBPACK_IMPORTED_MODULE_1__.Description\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM1QmtiLGFBQWFsYiwrREFBMkI7QUFDNUM7QUFFc0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ncm9xeS8uL25vZGVfbW9kdWxlcy92YXVsL2Rpc3QvaW5kZXgubWpzPzRhOWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuZnVuY3Rpb24gX19pbnNlcnRDU1MoY29kZSkge1xuICBpZiAoIWNvZGUgfHwgdHlwZW9mIGRvY3VtZW50ID09ICd1bmRlZmluZWQnKSByZXR1cm5cbiAgbGV0IGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF1cbiAgbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJ1xuICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKVxuICA7c3R5bGUuc3R5bGVTaGVldCA/IChzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjb2RlKSA6IHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvZGUpKVxufVxuXG5pbXBvcnQgKiBhcyBEaWFsb2dQcmltaXRpdmUgZnJvbSAnQHJhZGl4LXVpL3JlYWN0LWRpYWxvZyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RfX2RlZmF1bHQsIHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IERyYXdlckNvbnRleHQgPSBSZWFjdF9fZGVmYXVsdC5jcmVhdGVDb250ZXh0KHtcbiAgICBkcmF3ZXJSZWY6IHtcbiAgICAgICAgY3VycmVudDogbnVsbFxuICAgIH0sXG4gICAgb3ZlcmxheVJlZjoge1xuICAgICAgICBjdXJyZW50OiBudWxsXG4gICAgfSxcbiAgICBvblByZXNzOiAoKT0+e30sXG4gICAgb25SZWxlYXNlOiAoKT0+e30sXG4gICAgb25EcmFnOiAoKT0+e30sXG4gICAgb25OZXN0ZWREcmFnOiAoKT0+e30sXG4gICAgb25OZXN0ZWRPcGVuQ2hhbmdlOiAoKT0+e30sXG4gICAgb25OZXN0ZWRSZWxlYXNlOiAoKT0+e30sXG4gICAgb3BlblByb3A6IHVuZGVmaW5lZCxcbiAgICBkaXNtaXNzaWJsZTogZmFsc2UsXG4gICAgaXNPcGVuOiBmYWxzZSxcbiAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICBrZXlib2FyZElzT3Blbjoge1xuICAgICAgICBjdXJyZW50OiBmYWxzZVxuICAgIH0sXG4gICAgc25hcFBvaW50c09mZnNldDogbnVsbCxcbiAgICBzbmFwUG9pbnRzOiBudWxsLFxuICAgIGhhbmRsZU9ubHk6IGZhbHNlLFxuICAgIG1vZGFsOiBmYWxzZSxcbiAgICBzaG91bGRGYWRlOiBmYWxzZSxcbiAgICBhY3RpdmVTbmFwUG9pbnQ6IG51bGwsXG4gICAgb25PcGVuQ2hhbmdlOiAoKT0+e30sXG4gICAgc2V0QWN0aXZlU25hcFBvaW50OiAoKT0+e30sXG4gICAgY2xvc2VEcmF3ZXI6ICgpPT57fSxcbiAgICBkaXJlY3Rpb246ICdib3R0b20nLFxuICAgIHNob3VsZFNjYWxlQmFja2dyb3VuZDogZmFsc2UsXG4gICAgc2V0QmFja2dyb3VuZENvbG9yT25TY2FsZTogdHJ1ZSxcbiAgICBub0JvZHlTdHlsZXM6IGZhbHNlLFxuICAgIGNvbnRhaW5lcjogbnVsbFxufSk7XG5jb25zdCB1c2VEcmF3ZXJDb250ZXh0ID0gKCk9PntcbiAgICBjb25zdCBjb250ZXh0ID0gUmVhY3RfX2RlZmF1bHQudXNlQ29udGV4dChEcmF3ZXJDb250ZXh0KTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1c2VEcmF3ZXJDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBEcmF3ZXIuUm9vdCcpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dDtcbn07XG5cbl9faW5zZXJ0Q1NTKFwiW2RhdGEtdmF1bC1kcmF3ZXJde3RvdWNoLWFjdGlvbjpub25lO3dpbGwtY2hhbmdlOnRyYW5zZm9ybTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuNXMgY3ViaWMtYmV6aWVyKC4zMiwgLjcyLCAwLCAxKTthbmltYXRpb24tZHVyYXRpb246LjVzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuMzIsMC43MiwwLDEpfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2VdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPWJvdHRvbV1bZGF0YS1zdGF0ZT1vcGVuXXthbmltYXRpb24tbmFtZTpzbGlkZUZyb21Cb3R0b219W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1zbmFwLXBvaW50cz1mYWxzZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249Ym90dG9tXVtkYXRhLXN0YXRlPWNsb3NlZF17YW5pbWF0aW9uLW5hbWU6c2xpZGVUb0JvdHRvbX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPWZhbHNlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj10b3BdW2RhdGEtc3RhdGU9b3Blbl17YW5pbWF0aW9uLW5hbWU6c2xpZGVGcm9tVG9wfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2VdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXRvcF1bZGF0YS1zdGF0ZT1jbG9zZWRde2FuaW1hdGlvbi1uYW1lOnNsaWRlVG9Ub3B9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1zbmFwLXBvaW50cz1mYWxzZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249bGVmdF1bZGF0YS1zdGF0ZT1vcGVuXXthbmltYXRpb24tbmFtZTpzbGlkZUZyb21MZWZ0fVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtc25hcC1wb2ludHM9ZmFsc2VdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPWxlZnRdW2RhdGEtc3RhdGU9Y2xvc2VkXXthbmltYXRpb24tbmFtZTpzbGlkZVRvTGVmdH1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPWZhbHNlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1yaWdodF1bZGF0YS1zdGF0ZT1vcGVuXXthbmltYXRpb24tbmFtZTpzbGlkZUZyb21SaWdodH1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPWZhbHNlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1yaWdodF1bZGF0YS1zdGF0ZT1jbG9zZWRde2FuaW1hdGlvbi1uYW1lOnNsaWRlVG9SaWdodH1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPXRydWVdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPWJvdHRvbV17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMTAwJSwwKX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPXRydWVdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXRvcF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTEwMCUsMCl9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1zbmFwLXBvaW50cz10cnVlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1sZWZ0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMCUsMCwwKX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPXRydWVdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTAwJSwwLDApfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtZGVsYXllZC1zbmFwLXBvaW50cz10cnVlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj10b3Bde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLHZhcigtLXNuYXAtcG9pbnQtaGVpZ2h0LDApLDApfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtZGVsYXllZC1zbmFwLXBvaW50cz10cnVlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1ib3R0b21de3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLHZhcigtLXNuYXAtcG9pbnQtaGVpZ2h0LDApLDApfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtZGVsYXllZC1zbmFwLXBvaW50cz10cnVlXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1sZWZ0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QodmFyKC0tc25hcC1wb2ludC1oZWlnaHQsMCksMCwwKX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLWRlbGF5ZWQtc25hcC1wb2ludHM9dHJ1ZV1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249cmlnaHRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCh2YXIoLS1zbmFwLXBvaW50LWhlaWdodCwwKSwwLDApfVtkYXRhLXZhdWwtb3ZlcmxheV1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPWZhbHNlXXthbmltYXRpb24tZHVyYXRpb246LjVzO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKDAuMzIsMC43MiwwLDEpfVtkYXRhLXZhdWwtb3ZlcmxheV1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPWZhbHNlXVtkYXRhLXN0YXRlPW9wZW5de2FuaW1hdGlvbi1uYW1lOmZhZGVJbn1bZGF0YS12YXVsLW92ZXJsYXldW2RhdGEtc3RhdGU9Y2xvc2VkXXthbmltYXRpb24tbmFtZTpmYWRlT3V0fVtkYXRhLXZhdWwtb3ZlcmxheV1bZGF0YS12YXVsLXNuYXAtcG9pbnRzPXRydWVde29wYWNpdHk6MDt0cmFuc2l0aW9uOm9wYWNpdHkgLjVzIGN1YmljLWJlemllciguMzIsIC43MiwgMCwgMSl9W2RhdGEtdmF1bC1vdmVybGF5XVtkYXRhLXZhdWwtc25hcC1wb2ludHM9dHJ1ZV17b3BhY2l0eToxfVtkYXRhLXZhdWwtZHJhd2VyXTpub3QoW2RhdGEtdmF1bC1jdXN0b20tY29udGFpbmVyPXRydWVdKTo6YWZ0ZXJ7Y29udGVudDonJztwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOmluaGVyaXQ7YmFja2dyb3VuZC1jb2xvcjppbmhlcml0fVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj10b3BdOjphZnRlcnt0b3A6aW5pdGlhbDtib3R0b206MTAwJTtsZWZ0OjA7cmlnaHQ6MDtoZWlnaHQ6MjAwJX1bZGF0YS12YXVsLWRyYXdlcl1bZGF0YS12YXVsLWRyYXdlci1kaXJlY3Rpb249Ym90dG9tXTo6YWZ0ZXJ7dG9wOjEwMCU7Ym90dG9tOmluaXRpYWw7bGVmdDowO3JpZ2h0OjA7aGVpZ2h0OjIwMCV9W2RhdGEtdmF1bC1kcmF3ZXJdW2RhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uPWxlZnRdOjphZnRlcntsZWZ0OmluaXRpYWw7cmlnaHQ6MTAwJTt0b3A6MDtib3R0b206MDt3aWR0aDoyMDAlfVtkYXRhLXZhdWwtZHJhd2VyXVtkYXRhLXZhdWwtZHJhd2VyLWRpcmVjdGlvbj1yaWdodF06OmFmdGVye2xlZnQ6MTAwJTtyaWdodDppbml0aWFsO3RvcDowO2JvdHRvbTowO3dpZHRoOjIwMCV9W2RhdGEtdmF1bC1vdmVybGF5XVtkYXRhLXZhdWwtc25hcC1wb2ludHM9dHJ1ZV06bm90KFtkYXRhLXZhdWwtc25hcC1wb2ludHMtb3ZlcmxheT10cnVlXSk6bm90KFxcbltkYXRhLXN0YXRlPWNsb3NlZF1cXG4pe29wYWNpdHk6MH1bZGF0YS12YXVsLW92ZXJsYXldW2RhdGEtdmF1bC1zbmFwLXBvaW50cy1vdmVybGF5PXRydWVde29wYWNpdHk6MX1bZGF0YS12YXVsLWhhbmRsZV17ZGlzcGxheTpibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTtvcGFjaXR5Oi43O2JhY2tncm91bmQ6I2UyZTJlNDttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvO2hlaWdodDo1cHg7d2lkdGg6MzJweDtib3JkZXItcmFkaXVzOjFyZW07dG91Y2gtYWN0aW9uOnBhbi15fVtkYXRhLXZhdWwtaGFuZGxlXTphY3RpdmUsW2RhdGEtdmF1bC1oYW5kbGVdOmhvdmVye29wYWNpdHk6MX1bZGF0YS12YXVsLWhhbmRsZS1oaXRhcmVhXXtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKTt3aWR0aDptYXgoMTAwJSwyLjc1cmVtKTtoZWlnaHQ6bWF4KDEwMCUsMi43NXJlbSk7dG91Y2gtYWN0aW9uOmluaGVyaXR9QG1lZGlhIChob3Zlcjpob3ZlcikgYW5kIChwb2ludGVyOmZpbmUpe1tkYXRhLXZhdWwtZHJhd2VyXXt1c2VyLXNlbGVjdDpub25lfX1AbWVkaWEgKHBvaW50ZXI6ZmluZSl7W2RhdGEtdmF1bC1oYW5kbGUtaGl0YXJlYV06e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9fUBrZXlmcmFtZXMgZmFkZUlue2Zyb217b3BhY2l0eTowfXRve29wYWNpdHk6MX19QGtleWZyYW1lcyBmYWRlT3V0e3Rve29wYWNpdHk6MH19QGtleWZyYW1lcyBzbGlkZUZyb21Cb3R0b217ZnJvbXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMDAlLDApfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDAsMCl9fUBrZXlmcmFtZXMgc2xpZGVUb0JvdHRvbXt0b3t0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMDAlLDApfX1Aa2V5ZnJhbWVzIHNsaWRlRnJvbVRvcHtmcm9te3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMDAlLDApfXRve3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDAsMCl9fUBrZXlmcmFtZXMgc2xpZGVUb1RvcHt0b3t0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTAwJSwwKX19QGtleWZyYW1lcyBzbGlkZUZyb21MZWZ0e2Zyb217dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDAlLDAsMCl9dG97dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKX19QGtleWZyYW1lcyBzbGlkZVRvTGVmdHt0b3t0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMCUsMCwwKX19QGtleWZyYW1lcyBzbGlkZUZyb21SaWdodHtmcm9te3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDAlLDAsMCl9dG97dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKX19QGtleWZyYW1lcyBzbGlkZVRvUmlnaHR7dG97dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwMCUsMCwwKX19XCIpO1xuXG4vLyBUaGlzIGNvZGUgY29tZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWRvYmUvcmVhY3Qtc3BlY3RydW0vYmxvYi9tYWluL3BhY2thZ2VzLyU0MHJlYWN0LWFyaWEvb3ZlcmxheXMvc3JjL3VzZVByZXZlbnRTY3JvbGwudHNcbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDtcbmZ1bmN0aW9uIGNoYWluJDEoLi4uY2FsbGJhY2tzKSB7XG4gICAgcmV0dXJuICguLi5hcmdzKT0+e1xuICAgICAgICBmb3IgKGxldCBjYWxsYmFjayBvZiBjYWxsYmFja3Mpe1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzTWFjKCkge1xuICAgIHJldHVybiB0ZXN0UGxhdGZvcm0oL15NYWMvKTtcbn1cbmZ1bmN0aW9uIGlzSVBob25lKCkge1xuICAgIHJldHVybiB0ZXN0UGxhdGZvcm0oL15pUGhvbmUvKTtcbn1cbmZ1bmN0aW9uIGlzSVBhZCgpIHtcbiAgICByZXR1cm4gdGVzdFBsYXRmb3JtKC9eaVBhZC8pIHx8IC8vIGlQYWRPUyAxMyBsaWVzIGFuZCBzYXlzIGl0J3MgYSBNYWMsIGJ1dCB3ZSBjYW4gZGlzdGluZ3Vpc2ggYnkgZGV0ZWN0aW5nIHRvdWNoIHN1cHBvcnQuXG4gICAgaXNNYWMoKSAmJiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxO1xufVxuZnVuY3Rpb24gaXNJT1MoKSB7XG4gICAgcmV0dXJuIGlzSVBob25lKCkgfHwgaXNJUGFkKCk7XG59XG5mdW5jdGlvbiB0ZXN0UGxhdGZvcm0ocmUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lm5hdmlnYXRvciAhPSBudWxsID8gcmUudGVzdCh3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtKSA6IHVuZGVmaW5lZDtcbn1cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHZpc3VhbFZpZXdwb3J0ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudmlzdWFsVmlld3BvcnQ7XG5mdW5jdGlvbiBpc1Njcm9sbGFibGUobm9kZSkge1xuICAgIGxldCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHJldHVybiAvKGF1dG98c2Nyb2xsKS8udGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WCArIHN0eWxlLm92ZXJmbG93WSk7XG59XG5mdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICAgIGlmIChpc1Njcm9sbGFibGUobm9kZSkpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgd2hpbGUobm9kZSAmJiAhaXNTY3JvbGxhYmxlKG5vZGUpKXtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUgfHwgZG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG59XG4vLyBIVE1MIGlucHV0IHR5cGVzIHRoYXQgZG8gbm90IGNhdXNlIHRoZSBzb2Z0d2FyZSBrZXlib2FyZCB0byBhcHBlYXIuXG5jb25zdCBub25UZXh0SW5wdXRUeXBlcyA9IG5ldyBTZXQoW1xuICAgICdjaGVja2JveCcsXG4gICAgJ3JhZGlvJyxcbiAgICAncmFuZ2UnLFxuICAgICdjb2xvcicsXG4gICAgJ2ZpbGUnLFxuICAgICdpbWFnZScsXG4gICAgJ2J1dHRvbicsXG4gICAgJ3N1Ym1pdCcsXG4gICAgJ3Jlc2V0J1xuXSk7XG4vLyBUaGUgbnVtYmVyIG9mIGFjdGl2ZSB1c2VQcmV2ZW50U2Nyb2xsIGNhbGxzLiBVc2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHJldmVydCBiYWNrIHRvIHRoZSBvcmlnaW5hbCBwYWdlIHN0eWxlL3Njcm9sbCBwb3NpdGlvblxubGV0IHByZXZlbnRTY3JvbGxDb3VudCA9IDA7XG5sZXQgcmVzdG9yZTtcbi8qKlxuICogUHJldmVudHMgc2Nyb2xsaW5nIG9uIHRoZSBkb2N1bWVudCBib2R5IG9uIG1vdW50LCBhbmRcbiAqIHJlc3RvcmVzIGl0IG9uIHVubW91bnQuIEFsc28gZW5zdXJlcyB0aGF0IGNvbnRlbnQgZG9lcyBub3RcbiAqIHNoaWZ0IGR1ZSB0byB0aGUgc2Nyb2xsYmFycyBkaXNhcHBlYXJpbmcuXG4gKi8gZnVuY3Rpb24gdXNlUHJldmVudFNjcm9sbChvcHRpb25zID0ge30pIHtcbiAgICBsZXQgeyBpc0Rpc2FibGVkIH0gPSBvcHRpb25zO1xuICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCk9PntcbiAgICAgICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ZW50U2Nyb2xsQ291bnQrKztcbiAgICAgICAgaWYgKHByZXZlbnRTY3JvbGxDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKGlzSU9TKCkpIHtcbiAgICAgICAgICAgICAgICByZXN0b3JlID0gcHJldmVudFNjcm9sbE1vYmlsZVNhZmFyaSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN0b3JlID0gcHJldmVudFNjcm9sbFN0YW5kYXJkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpPT57XG4gICAgICAgICAgICBwcmV2ZW50U2Nyb2xsQ291bnQtLTtcbiAgICAgICAgICAgIGlmIChwcmV2ZW50U2Nyb2xsQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSwgW1xuICAgICAgICBpc0Rpc2FibGVkXG4gICAgXSk7XG59XG4vLyBGb3IgbW9zdCBicm93c2VycywgYWxsIHdlIG5lZWQgdG8gZG8gaXMgc2V0IGBvdmVyZmxvdzogaGlkZGVuYCBvbiB0aGUgcm9vdCBlbGVtZW50LCBhbmRcbi8vIGFkZCBzb21lIHBhZGRpbmcgdG8gcHJldmVudCB0aGUgcGFnZSBmcm9tIHNoaWZ0aW5nIHdoZW4gdGhlIHNjcm9sbGJhciBpcyBoaWRkZW4uXG5mdW5jdGlvbiBwcmV2ZW50U2Nyb2xsU3RhbmRhcmQoKSB7XG4gICAgcmV0dXJuIGNoYWluJDEoc2V0U3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAncGFkZGluZ1JpZ2h0JywgYCR7d2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGh9cHhgKSk7XG59XG4vLyBNb2JpbGUgU2FmYXJpIGlzIGEgd2hvbGUgZGlmZmVyZW50IGJlYXN0LiBFdmVuIHdpdGggb3ZlcmZsb3c6IGhpZGRlbixcbi8vIGl0IHN0aWxsIHNjcm9sbHMgdGhlIHBhZ2UgaW4gbWFueSBzaXR1YXRpb25zOlxuLy9cbi8vIDEuIFdoZW4gdGhlIGJvdHRvbSB0b29sYmFyIGFuZCBhZGRyZXNzIGJhciBhcmUgY29sbGFwc2VkLCBwYWdlIHNjcm9sbGluZyBpcyBhbHdheXMgYWxsb3dlZC5cbi8vIDIuIFdoZW4gdGhlIGtleWJvYXJkIGlzIHZpc2libGUsIHRoZSB2aWV3cG9ydCBkb2VzIG5vdCByZXNpemUuIEluc3RlYWQsIHRoZSBrZXlib2FyZCBjb3ZlcnMgcGFydCBvZlxuLy8gICAgaXQsIHNvIGl0IGJlY29tZXMgc2Nyb2xsYWJsZS5cbi8vIDMuIFdoZW4gdGFwcGluZyBvbiBhbiBpbnB1dCwgdGhlIHBhZ2UgYWx3YXlzIHNjcm9sbHMgc28gdGhhdCB0aGUgaW5wdXQgaXMgY2VudGVyZWQgaW4gdGhlIHZpc3VhbCB2aWV3cG9ydC5cbi8vICAgIFRoaXMgbWF5IGNhdXNlIGV2ZW4gZml4ZWQgcG9zaXRpb24gZWxlbWVudHMgdG8gc2Nyb2xsIG9mZiB0aGUgc2NyZWVuLlxuLy8gNC4gV2hlbiB1c2luZyB0aGUgbmV4dC9wcmV2aW91cyBidXR0b25zIGluIHRoZSBrZXlib2FyZCB0byBuYXZpZ2F0ZSBiZXR3ZWVuIGlucHV0cywgdGhlIHdob2xlIHBhZ2UgYWx3YXlzXG4vLyAgICBzY3JvbGxzLCBldmVuIGlmIHRoZSBpbnB1dCBpcyBpbnNpZGUgYSBuZXN0ZWQgc2Nyb2xsYWJsZSBlbGVtZW50IHRoYXQgY291bGQgYmUgc2Nyb2xsZWQgaW5zdGVhZC5cbi8vXG4vLyBJbiBvcmRlciB0byB3b3JrIGFyb3VuZCB0aGVzZSBjYXNlcywgYW5kIHByZXZlbnQgc2Nyb2xsaW5nIHdpdGhvdXQgamFua2luZXNzLCB3ZSBkbyBhIGZldyB0aGluZ3M6XG4vL1xuLy8gMS4gUHJldmVudCBkZWZhdWx0IG9uIGB0b3VjaG1vdmVgIGV2ZW50cyB0aGF0IGFyZSBub3QgaW4gYSBzY3JvbGxhYmxlIGVsZW1lbnQuIFRoaXMgcHJldmVudHMgdG91Y2ggc2Nyb2xsaW5nXG4vLyAgICBvbiB0aGUgd2luZG93LlxuLy8gMi4gUHJldmVudCBkZWZhdWx0IG9uIGB0b3VjaG1vdmVgIGV2ZW50cyBpbnNpZGUgYSBzY3JvbGxhYmxlIGVsZW1lbnQgd2hlbiB0aGUgc2Nyb2xsIHBvc2l0aW9uIGlzIGF0IHRoZVxuLy8gICAgdG9wIG9yIGJvdHRvbS4gVGhpcyBhdm9pZHMgdGhlIHdob2xlIHBhZ2Ugc2Nyb2xsaW5nIGluc3RlYWQsIGJ1dCBkb2VzIHByZXZlbnQgb3ZlcnNjcm9sbGluZy5cbi8vIDMuIFByZXZlbnQgZGVmYXVsdCBvbiBgdG91Y2hlbmRgIGV2ZW50cyBvbiBpbnB1dCBlbGVtZW50cyBhbmQgaGFuZGxlIGZvY3VzaW5nIHRoZSBlbGVtZW50IG91cnNlbHZlcy5cbi8vIDQuIFdoZW4gZm9jdXNpbmcgYW4gaW5wdXQsIGFwcGx5IGEgdHJhbnNmb3JtIHRvIHRyaWNrIFNhZmFyaSBpbnRvIHRoaW5raW5nIHRoZSBpbnB1dCBpcyBhdCB0aGUgdG9wXG4vLyAgICBvZiB0aGUgcGFnZSwgd2hpY2ggcHJldmVudHMgaXQgZnJvbSBzY3JvbGxpbmcgdGhlIHBhZ2UuIEFmdGVyIHRoZSBpbnB1dCBpcyBmb2N1c2VkLCBzY3JvbGwgdGhlIGVsZW1lbnRcbi8vICAgIGludG8gdmlldyBvdXJzZWx2ZXMsIHdpdGhvdXQgc2Nyb2xsaW5nIHRoZSB3aG9sZSBwYWdlLlxuLy8gNS4gT2Zmc2V0IHRoZSBib2R5IGJ5IHRoZSBzY3JvbGwgcG9zaXRpb24gdXNpbmcgYSBuZWdhdGl2ZSBtYXJnaW4gYW5kIHNjcm9sbCB0byB0aGUgdG9wLiBUaGlzIHNob3VsZCBhcHBlYXIgdGhlXG4vLyAgICBzYW1lIHZpc3VhbGx5LCBidXQgbWFrZXMgdGhlIGFjdHVhbCBzY3JvbGwgcG9zaXRpb24gYWx3YXlzIHplcm8uIFRoaXMgaXMgcmVxdWlyZWQgdG8gbWFrZSBhbGwgb2YgdGhlXG4vLyAgICBhYm92ZSB3b3JrIG9yIFNhZmFyaSB3aWxsIHN0aWxsIHRyeSB0byBzY3JvbGwgdGhlIHBhZ2Ugd2hlbiBmb2N1c2luZyBhbiBpbnB1dC5cbi8vIDYuIEFzIGEgbGFzdCByZXNvcnQsIGhhbmRsZSB3aW5kb3cgc2Nyb2xsIGV2ZW50cywgYW5kIHNjcm9sbCBiYWNrIHRvIHRoZSB0b3AuIFRoaXMgY2FuIGhhcHBlbiB3aGVuIGF0dGVtcHRpbmdcbi8vICAgIHRvIG5hdmlnYXRlIHRvIGFuIGlucHV0IHdpdGggdGhlIG5leHQvcHJldmlvdXMgYnV0dG9ucyB0aGF0J3Mgb3V0c2lkZSBhIG1vZGFsLlxuZnVuY3Rpb24gcHJldmVudFNjcm9sbE1vYmlsZVNhZmFyaSgpIHtcbiAgICBsZXQgc2Nyb2xsYWJsZTtcbiAgICBsZXQgbGFzdFkgPSAwO1xuICAgIGxldCBvblRvdWNoU3RhcnQgPSAoZSk9PntcbiAgICAgICAgLy8gU3RvcmUgdGhlIG5lYXJlc3Qgc2Nyb2xsYWJsZSBwYXJlbnQgZWxlbWVudCBmcm9tIHRoZSBlbGVtZW50IHRoYXQgdGhlIHVzZXIgdG91Y2hlZC5cbiAgICAgICAgc2Nyb2xsYWJsZSA9IGdldFNjcm9sbFBhcmVudChlLnRhcmdldCk7XG4gICAgICAgIGlmIChzY3JvbGxhYmxlID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgc2Nyb2xsYWJsZSA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RZID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcbiAgICB9O1xuICAgIGxldCBvblRvdWNoTW92ZSA9IChlKT0+e1xuICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbGluZyB0aGUgd2luZG93LlxuICAgICAgICBpZiAoIXNjcm9sbGFibGUgfHwgc2Nyb2xsYWJsZSA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IHNjcm9sbGFibGUgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2ZW50IHNjcm9sbGluZyB1cCB3aGVuIGF0IHRoZSB0b3AgYW5kIHNjcm9sbGluZyBkb3duIHdoZW4gYXQgdGhlIGJvdHRvbVxuICAgICAgICAvLyBvZiBhIG5lc3RlZCBzY3JvbGxhYmxlIGFyZWEsIG90aGVyd2lzZSBtb2JpbGUgU2FmYXJpIHdpbGwgc3RhcnQgc2Nyb2xsaW5nXG4gICAgICAgIC8vIHRoZSB3aW5kb3cgaW5zdGVhZC4gVW5mb3J0dW5hdGVseSwgdGhpcyBkaXNhYmxlcyBib3VuY2Ugc2Nyb2xsaW5nIHdoZW4gYXRcbiAgICAgICAgLy8gdGhlIHRvcCBidXQgaXQncyB0aGUgYmVzdCB3ZSBjYW4gZG8uXG4gICAgICAgIGxldCB5ID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgbGV0IHNjcm9sbFRvcCA9IHNjcm9sbGFibGUuc2Nyb2xsVG9wO1xuICAgICAgICBsZXQgYm90dG9tID0gc2Nyb2xsYWJsZS5zY3JvbGxIZWlnaHQgLSBzY3JvbGxhYmxlLmNsaWVudEhlaWdodDtcbiAgICAgICAgaWYgKGJvdHRvbSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY3JvbGxUb3AgPD0gMCAmJiB5ID4gbGFzdFkgfHwgc2Nyb2xsVG9wID49IGJvdHRvbSAmJiB5IDwgbGFzdFkpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0WSA9IHk7XG4gICAgfTtcbiAgICBsZXQgb25Ub3VjaEVuZCA9IChlKT0+e1xuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIC8vIEFwcGx5IHRoaXMgY2hhbmdlIGlmIHdlJ3JlIG5vdCBhbHJlYWR5IGZvY3VzZWQgb24gdGhlIHRhcmdldCBlbGVtZW50XG4gICAgICAgIGlmIChpc0lucHV0KHRhcmdldCkgJiYgdGFyZ2V0ICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAvLyBBcHBseSBhIHRyYW5zZm9ybSB0byB0cmljayBTYWZhcmkgaW50byB0aGlua2luZyB0aGUgaW5wdXQgaXMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgICAgICAgLy8gc28gaXQgZG9lc24ndCB0cnkgdG8gc2Nyb2xsIGl0IGludG8gdmlldy4gV2hlbiB0YXBwaW5nIG9uIGFuIGlucHV0LCB0aGlzIG5lZWRzIHRvXG4gICAgICAgICAgICAvLyBiZSBkb25lIGJlZm9yZSB0aGUgXCJmb2N1c1wiIGV2ZW50LCBzbyB3ZSBoYXZlIHRvIGZvY3VzIHRoZSBlbGVtZW50IG91cnNlbHZlcy5cbiAgICAgICAgICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtMjAwMHB4KSc7XG4gICAgICAgICAgICB0YXJnZXQuZm9jdXMoKTtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+e1xuICAgICAgICAgICAgICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBsZXQgb25Gb2N1cyA9IChlKT0+e1xuICAgICAgICBsZXQgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIGlmIChpc0lucHV0KHRhcmdldCkpIHtcbiAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBhbHNvIG5lZWRzIHRvIGJlIGFwcGxpZWQgaW4gdGhlIGZvY3VzIGV2ZW50IGluIGNhc2VzIHdoZXJlIGZvY3VzIG1vdmVzXG4gICAgICAgICAgICAvLyBvdGhlciB0aGFuIHRhcHBpbmcgb24gYW4gaW5wdXQgZGlyZWN0bHksIGUuZy4gdGhlIG5leHQvcHJldmlvdXMgYnV0dG9ucyBpbiB0aGVcbiAgICAgICAgICAgIC8vIHNvZnR3YXJlIGtleWJvYXJkLiBJbiB0aGVzZSBjYXNlcywgaXQgc2VlbXMgYXBwbHlpbmcgdGhlIHRyYW5zZm9ybSBpbiB0aGUgZm9jdXMgZXZlbnRcbiAgICAgICAgICAgIC8vIGlzIGdvb2QgZW5vdWdoLCB3aGVyZWFzIHdoZW4gdGFwcGluZyBhbiBpbnB1dCwgaXQgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgZm9jdXMgZXZlbnQuIPCfpLfigI3imYLvuI9cbiAgICAgICAgICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtMjAwMHB4KSc7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9PntcbiAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gJyc7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyB3aWxsIGhhdmUgcHJldmVudGVkIHRoZSBicm93c2VyIGZyb20gc2Nyb2xsaW5nIHRoZSBmb2N1c2VkIGVsZW1lbnQgaW50byB2aWV3LFxuICAgICAgICAgICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gZG8gdGhpcyBvdXJzZWx2ZXMgaW4gYSB3YXkgdGhhdCBkb2Vzbid0IGNhdXNlIHRoZSB3aG9sZSBwYWdlIHRvIHNjcm9sbC5cbiAgICAgICAgICAgICAgICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpc3VhbFZpZXdwb3J0LmhlaWdodCA8IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGtleWJvYXJkIGlzIGFscmVhZHkgdmlzaWJsZSwgZG8gdGhpcyBhZnRlciBvbmUgYWRkaXRpb25hbCBmcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gd2FpdCBmb3IgdGhlIHRyYW5zZm9ybSB0byBiZSByZW1vdmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsSW50b1ZpZXcodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3YWl0IGZvciB0aGUgdmlzdWFsIHZpZXdwb3J0IHRvIHJlc2l6ZSBiZWZvcmUgc2Nyb2xsaW5nIHNvIHdlIGNhblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWVhc3VyZSB0aGUgY29ycmVjdCBwb3NpdGlvbiB0byBzY3JvbGwgdG8uXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXN1YWxWaWV3cG9ydC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKT0+c2Nyb2xsSW50b1ZpZXcodGFyZ2V0KSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCBvbldpbmRvd1Njcm9sbCA9ICgpPT57XG4gICAgICAgIC8vIExhc3QgcmVzb3J0LiBJZiB0aGUgd2luZG93IHNjcm9sbGVkLCBzY3JvbGwgaXQgYmFjayB0byB0aGUgdG9wLlxuICAgICAgICAvLyBJdCBzaG91bGQgYWx3YXlzIGJlIGF0IHRoZSB0b3AgYmVjYXVzZSB0aGUgYm9keSB3aWxsIGhhdmUgYSBuZWdhdGl2ZSBtYXJnaW4gKHNlZSBiZWxvdykuXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9O1xuICAgIC8vIFJlY29yZCB0aGUgb3JpZ2luYWwgc2Nyb2xsIHBvc2l0aW9uIHNvIHdlIGNhbiByZXN0b3JlIGl0LlxuICAgIC8vIFRoZW4gYXBwbHkgYSBuZWdhdGl2ZSBtYXJnaW4gdG8gdGhlIGJvZHkgdG8gb2Zmc2V0IGl0IGJ5IHRoZSBzY3JvbGwgcG9zaXRpb24uIFRoaXMgd2lsbFxuICAgIC8vIGVuYWJsZSB1cyB0byBzY3JvbGwgdGhlIHdpbmRvdyB0byB0aGUgdG9wLCB3aGljaCBpcyByZXF1aXJlZCBmb3IgdGhlIHJlc3Qgb2YgdGhpcyB0byB3b3JrLlxuICAgIGxldCBzY3JvbGxYID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgIGxldCBzY3JvbGxZID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgIGxldCByZXN0b3JlU3R5bGVzID0gY2hhaW4kMShzZXRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICdwYWRkaW5nUmlnaHQnLCBgJHt3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aH1weGApKTtcbiAgICAvLyBTY3JvbGwgdG8gdGhlIHRvcC4gVGhlIG5lZ2F0aXZlIG1hcmdpbiBvbiB0aGUgYm9keSB3aWxsIG1ha2UgdGhpcyBhcHBlYXIgdGhlIHNhbWUuXG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIGxldCByZW1vdmVFdmVudHMgPSBjaGFpbiQxKGFkZEV2ZW50KGRvY3VtZW50LCAndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pLCBhZGRFdmVudChkb2N1bWVudCwgJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCB7XG4gICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSksIGFkZEV2ZW50KGRvY3VtZW50LCAndG91Y2hlbmQnLCBvblRvdWNoRW5kLCB7XG4gICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSksIGFkZEV2ZW50KGRvY3VtZW50LCAnZm9jdXMnLCBvbkZvY3VzLCB0cnVlKSwgYWRkRXZlbnQod2luZG93LCAnc2Nyb2xsJywgb25XaW5kb3dTY3JvbGwpKTtcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgLy8gUmVzdG9yZSBzdHlsZXMgYW5kIHNjcm9sbCB0aGUgcGFnZSBiYWNrIHRvIHdoZXJlIGl0IHdhcy5cbiAgICAgICAgcmVzdG9yZVN0eWxlcygpO1xuICAgICAgICByZW1vdmVFdmVudHMoKTtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHNjcm9sbFgsIHNjcm9sbFkpO1xuICAgIH07XG59XG4vLyBTZXRzIGEgQ1NTIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQsIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gdG8gcmV2ZXJ0IGl0IHRvIHRoZSBwcmV2aW91cyB2YWx1ZS5cbmZ1bmN0aW9uIHNldFN0eWxlKGVsZW1lbnQsIHN0eWxlLCB2YWx1ZSkge1xuICAgIGxldCBjdXIgPSBlbGVtZW50LnN0eWxlW3N0eWxlXTtcbiAgICBlbGVtZW50LnN0eWxlW3N0eWxlXSA9IHZhbHVlO1xuICAgIHJldHVybiAoKT0+e1xuICAgICAgICBlbGVtZW50LnN0eWxlW3N0eWxlXSA9IGN1cjtcbiAgICB9O1xufVxuLy8gQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBhbiBlbGVtZW50LCBhbmQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHJlbW92ZSBpdC5cbmZ1bmN0aW9uIGFkZEV2ZW50KHRhcmdldCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKT0+e1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2Nyb2xsSW50b1ZpZXcodGFyZ2V0KSB7XG4gICAgbGV0IHJvb3QgPSBkb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICB3aGlsZSh0YXJnZXQgJiYgdGFyZ2V0ICE9PSByb290KXtcbiAgICAgICAgLy8gRmluZCB0aGUgcGFyZW50IHNjcm9sbGFibGUgZWxlbWVudCBhbmQgYWRqdXN0IHRoZSBzY3JvbGwgcG9zaXRpb24gaWYgdGhlIHRhcmdldCBpcyBub3QgYWxyZWFkeSBpbiB2aWV3LlxuICAgICAgICBsZXQgc2Nyb2xsYWJsZSA9IGdldFNjcm9sbFBhcmVudCh0YXJnZXQpO1xuICAgICAgICBpZiAoc2Nyb2xsYWJsZSAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIHNjcm9sbGFibGUgIT09IGRvY3VtZW50LmJvZHkgJiYgc2Nyb2xsYWJsZSAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICBsZXQgc2Nyb2xsYWJsZVRvcCA9IHNjcm9sbGFibGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICAgICAgbGV0IHRhcmdldFRvcCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICAgICAgICBsZXQgdGFyZ2V0Qm90dG9tID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IGtleWJvYXJkSGVpZ2h0ID0gc2Nyb2xsYWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgICAgICBpZiAodGFyZ2V0Qm90dG9tID4ga2V5Ym9hcmRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLnNjcm9sbFRvcCArPSB0YXJnZXRUb3AgLSBzY3JvbGxhYmxlVG9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgdGFyZ2V0ID0gc2Nyb2xsYWJsZS5wYXJlbnRFbGVtZW50O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzSW5wdXQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRhcmdldCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgIW5vblRleHRJbnB1dFR5cGVzLmhhcyh0YXJnZXQudHlwZSkgfHwgdGFyZ2V0IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCB8fCB0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiB0YXJnZXQuaXNDb250ZW50RWRpdGFibGU7XG59XG5cbi8vIFRoaXMgY29kZSBjb21lcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWRpeC11aS9wcmltaXRpdmVzL3RyZWUvbWFpbi9wYWNrYWdlcy9yZWFjdC9jb21wb3NlLXJlZnNcbi8qKlxuICogU2V0IGEgZ2l2ZW4gcmVmIHRvIGEgZ2l2ZW4gdmFsdWVcbiAqIFRoaXMgdXRpbGl0eSB0YWtlcyBjYXJlIG9mIGRpZmZlcmVudCB0eXBlcyBvZiByZWZzOiBjYWxsYmFjayByZWZzIGFuZCBSZWZPYmplY3QocylcbiAqLyBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlZih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChyZWYgIT09IG51bGwgJiYgcmVmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICB9XG59XG4vKipcbiAqIEEgdXRpbGl0eSB0byBjb21wb3NlIG11bHRpcGxlIHJlZnMgdG9nZXRoZXJcbiAqIEFjY2VwdHMgY2FsbGJhY2sgcmVmcyBhbmQgUmVmT2JqZWN0KHMpXG4gKi8gZnVuY3Rpb24gY29tcG9zZVJlZnMoLi4ucmVmcykge1xuICAgIHJldHVybiAobm9kZSk9PnJlZnMuZm9yRWFjaCgocmVmKT0+c2V0UmVmKHJlZiwgbm9kZSkpO1xufVxuLyoqXG4gKiBBIGN1c3RvbSBob29rIHRoYXQgY29tcG9zZXMgbXVsdGlwbGUgcmVmc1xuICogQWNjZXB0cyBjYWxsYmFjayByZWZzIGFuZCBSZWZPYmplY3QocylcbiAqLyBmdW5jdGlvbiB1c2VDb21wb3NlZFJlZnMoLi4ucmVmcykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soY29tcG9zZVJlZnMoLi4ucmVmcyksIHJlZnMpO1xufVxuXG5jb25zdCBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBzZXQoZWwsIHN0eWxlcywgaWdub3JlQ2FjaGUgPSBmYWxzZSkge1xuICAgIGlmICghZWwgfHwgIShlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuO1xuICAgIGxldCBvcmlnaW5hbFN0eWxlcyA9IHt9O1xuICAgIE9iamVjdC5lbnRyaWVzKHN0eWxlcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKT0+e1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJy0tJykpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9yaWdpbmFsU3R5bGVzW2tleV0gPSBlbC5zdHlsZVtrZXldO1xuICAgICAgICBlbC5zdHlsZVtrZXldID0gdmFsdWU7XG4gICAgfSk7XG4gICAgaWYgKGlnbm9yZUNhY2hlKSByZXR1cm47XG4gICAgY2FjaGUuc2V0KGVsLCBvcmlnaW5hbFN0eWxlcyk7XG59XG5mdW5jdGlvbiByZXNldChlbCwgcHJvcCkge1xuICAgIGlmICghZWwgfHwgIShlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuO1xuICAgIGxldCBvcmlnaW5hbFN0eWxlcyA9IGNhY2hlLmdldChlbCk7XG4gICAgaWYgKCFvcmlnaW5hbFN0eWxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHtcbiAgICAgICAgZWwuc3R5bGVbcHJvcF0gPSBvcmlnaW5hbFN0eWxlc1twcm9wXTtcbiAgICB9XG59XG5jb25zdCBpc1ZlcnRpY2FsID0gKGRpcmVjdGlvbik9PntcbiAgICBzd2l0Y2goZGlyZWN0aW9uKXtcbiAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcbiAgICB9XG59O1xuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsZW1lbnQsIGRpcmVjdGlvbikge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSAvLyBAdHMtaWdub3JlXG4gICAgc3R5bGUudHJhbnNmb3JtIHx8IHN0eWxlLndlYmtpdFRyYW5zZm9ybSB8fCBzdHlsZS5tb3pUcmFuc2Zvcm07XG4gICAgbGV0IG1hdCA9IHRyYW5zZm9ybS5tYXRjaCgvXm1hdHJpeDNkXFwoKC4rKVxcKSQvKTtcbiAgICBpZiAobWF0KSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy90cmFuc2Zvcm0tZnVuY3Rpb24vbWF0cml4M2RcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWF0WzFdLnNwbGl0KCcsICcpW2lzVmVydGljYWwoZGlyZWN0aW9uKSA/IDEzIDogMTJdKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3RyYW5zZm9ybS1mdW5jdGlvbi9tYXRyaXhcbiAgICBtYXQgPSB0cmFuc2Zvcm0ubWF0Y2goL15tYXRyaXhcXCgoLispXFwpJC8pO1xuICAgIHJldHVybiBtYXQgPyBwYXJzZUZsb2F0KG1hdFsxXS5zcGxpdCgnLCAnKVtpc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyA1IDogNF0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIGRhbXBlblZhbHVlKHYpIHtcbiAgICByZXR1cm4gOCAqIChNYXRoLmxvZyh2ICsgMSkgLSAyKTtcbn1cbmZ1bmN0aW9uIGFzc2lnblN0eWxlKGVsZW1lbnQsIHN0eWxlKSB7XG4gICAgaWYgKCFlbGVtZW50KSByZXR1cm4gKCk9Pnt9O1xuICAgIGNvbnN0IHByZXZTdHlsZSA9IGVsZW1lbnQuc3R5bGUuY3NzVGV4dDtcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICByZXR1cm4gKCk9PntcbiAgICAgICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gcHJldlN0eWxlO1xuICAgIH07XG59XG4vKipcbiAqIFJlY2VpdmVzIGZ1bmN0aW9ucyBhcyBhcmd1bWVudHMgYW5kIHJldHVybnMgYSBuZXcgZnVuY3Rpb24gdGhhdCBjYWxscyBhbGwuXG4gKi8gZnVuY3Rpb24gY2hhaW4oLi4uZm5zKSB7XG4gICAgcmV0dXJuICguLi5hcmdzKT0+e1xuICAgICAgICBmb3IgKGNvbnN0IGZuIG9mIGZucyl7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cblxuY29uc3QgVFJBTlNJVElPTlMgPSB7XG4gICAgRFVSQVRJT046IDAuNSxcbiAgICBFQVNFOiBbXG4gICAgICAgIDAuMzIsXG4gICAgICAgIDAuNzIsXG4gICAgICAgIDAsXG4gICAgICAgIDFcbiAgICBdXG59O1xuY29uc3QgVkVMT0NJVFlfVEhSRVNIT0xEID0gMC40O1xuY29uc3QgQ0xPU0VfVEhSRVNIT0xEID0gMC4yNTtcbmNvbnN0IFNDUk9MTF9MT0NLX1RJTUVPVVQgPSAxMDA7XG5jb25zdCBCT1JERVJfUkFESVVTID0gODtcbmNvbnN0IE5FU1RFRF9ESVNQTEFDRU1FTlQgPSAxNjtcbmNvbnN0IFdJTkRPV19UT1BfT0ZGU0VUID0gMjY7XG5jb25zdCBEUkFHX0NMQVNTID0gJ3ZhdWwtZHJhZ2dpbmcnO1xuXG4vLyBUaGlzIGNvZGUgY29tZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcmFkaXgtdWkvcHJpbWl0aXZlcy9ibG9iL21haW4vcGFja2FnZXMvcmVhY3QvdXNlLWNvbnRyb2xsYWJsZS1zdGF0ZS9zcmMvdXNlQ29udHJvbGxhYmxlU3RhdGUudHN4XG5mdW5jdGlvbiB1c2VDYWxsYmFja1JlZihjYWxsYmFjaykge1xuICAgIGNvbnN0IGNhbGxiYWNrUmVmID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKGNhbGxiYWNrKTtcbiAgICBSZWFjdF9fZGVmYXVsdC51c2VFZmZlY3QoKCk9PntcbiAgICAgICAgY2FsbGJhY2tSZWYuY3VycmVudCA9IGNhbGxiYWNrO1xuICAgIH0pO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTkyNDBcbiAgICByZXR1cm4gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+KC4uLmFyZ3MpPT5jYWxsYmFja1JlZi5jdXJyZW50ID09IG51bGwgPyB2b2lkIDAgOiBjYWxsYmFja1JlZi5jdXJyZW50LmNhbGwoY2FsbGJhY2tSZWYsIC4uLmFyZ3MpLCBbXSk7XG59XG5mdW5jdGlvbiB1c2VVbmNvbnRyb2xsZWRTdGF0ZSh7IGRlZmF1bHRQcm9wLCBvbkNoYW5nZSB9KSB7XG4gICAgY29uc3QgdW5jb250cm9sbGVkU3RhdGUgPSBSZWFjdF9fZGVmYXVsdC51c2VTdGF0ZShkZWZhdWx0UHJvcCk7XG4gICAgY29uc3QgW3ZhbHVlXSA9IHVuY29udHJvbGxlZFN0YXRlO1xuICAgIGNvbnN0IHByZXZWYWx1ZVJlZiA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZih2YWx1ZSk7XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2tSZWYob25DaGFuZ2UpO1xuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAocHJldlZhbHVlUmVmLmN1cnJlbnQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBoYW5kbGVDaGFuZ2UodmFsdWUpO1xuICAgICAgICAgICAgcHJldlZhbHVlUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHByZXZWYWx1ZVJlZixcbiAgICAgICAgaGFuZGxlQ2hhbmdlXG4gICAgXSk7XG4gICAgcmV0dXJuIHVuY29udHJvbGxlZFN0YXRlO1xufVxuZnVuY3Rpb24gdXNlQ29udHJvbGxhYmxlU3RhdGUoeyBwcm9wLCBkZWZhdWx0UHJvcCwgb25DaGFuZ2UgPSAoKT0+e30gfSkge1xuICAgIGNvbnN0IFt1bmNvbnRyb2xsZWRQcm9wLCBzZXRVbmNvbnRyb2xsZWRQcm9wXSA9IHVzZVVuY29udHJvbGxlZFN0YXRlKHtcbiAgICAgICAgZGVmYXVsdFByb3AsXG4gICAgICAgIG9uQ2hhbmdlXG4gICAgfSk7XG4gICAgY29uc3QgaXNDb250cm9sbGVkID0gcHJvcCAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHZhbHVlID0gaXNDb250cm9sbGVkID8gcHJvcCA6IHVuY29udHJvbGxlZFByb3A7XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gdXNlQ2FsbGJhY2tSZWYob25DaGFuZ2UpO1xuICAgIGNvbnN0IHNldFZhbHVlID0gUmVhY3RfX2RlZmF1bHQudXNlQ2FsbGJhY2soKG5leHRWYWx1ZSk9PntcbiAgICAgICAgaWYgKGlzQ29udHJvbGxlZCkge1xuICAgICAgICAgICAgY29uc3Qgc2V0dGVyID0gbmV4dFZhbHVlO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgbmV4dFZhbHVlID09PSAnZnVuY3Rpb24nID8gc2V0dGVyKHByb3ApIDogbmV4dFZhbHVlO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBwcm9wKSBoYW5kbGVDaGFuZ2UodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VW5jb250cm9sbGVkUHJvcChuZXh0VmFsdWUpO1xuICAgICAgICB9XG4gICAgfSwgW1xuICAgICAgICBpc0NvbnRyb2xsZWQsXG4gICAgICAgIHByb3AsXG4gICAgICAgIHNldFVuY29udHJvbGxlZFByb3AsXG4gICAgICAgIGhhbmRsZUNoYW5nZVxuICAgIF0pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBzZXRWYWx1ZVxuICAgIF07XG59XG5cbmZ1bmN0aW9uIHVzZVNuYXBQb2ludHMoeyBhY3RpdmVTbmFwUG9pbnRQcm9wLCBzZXRBY3RpdmVTbmFwUG9pbnRQcm9wLCBzbmFwUG9pbnRzLCBkcmF3ZXJSZWYsIG92ZXJsYXlSZWYsIGZhZGVGcm9tSW5kZXgsIG9uU25hcFBvaW50Q2hhbmdlLCBkaXJlY3Rpb24gPSAnYm90dG9tJywgY29udGFpbmVyLCBzbmFwVG9TZXF1ZW50aWFsUG9pbnQgfSkge1xuICAgIGNvbnN0IFthY3RpdmVTbmFwUG9pbnQsIHNldEFjdGl2ZVNuYXBQb2ludF0gPSB1c2VDb250cm9sbGFibGVTdGF0ZSh7XG4gICAgICAgIHByb3A6IGFjdGl2ZVNuYXBQb2ludFByb3AsXG4gICAgICAgIGRlZmF1bHRQcm9wOiBzbmFwUG9pbnRzID09IG51bGwgPyB2b2lkIDAgOiBzbmFwUG9pbnRzWzBdLFxuICAgICAgICBvbkNoYW5nZTogc2V0QWN0aXZlU25hcFBvaW50UHJvcFxuICAgIH0pO1xuICAgIGNvbnN0IFt3aW5kb3dEaW1lbnNpb25zLCBzZXRXaW5kb3dEaW1lbnNpb25zXSA9IFJlYWN0X19kZWZhdWx0LnVzZVN0YXRlKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8ge1xuICAgICAgICBpbm5lcldpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgaW5uZXJIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodFxuICAgIH0gOiB1bmRlZmluZWQpO1xuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBmdW5jdGlvbiBvblJlc2l6ZSgpIHtcbiAgICAgICAgICAgIHNldFdpbmRvd0RpbWVuc2lvbnMoe1xuICAgICAgICAgICAgICAgIGlubmVyV2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGlubmVySGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG4gICAgICAgIHJldHVybiAoKT0+d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uUmVzaXplKTtcbiAgICB9LCBbXSk7XG4gICAgY29uc3QgaXNMYXN0U25hcFBvaW50ID0gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+YWN0aXZlU25hcFBvaW50ID09PSAoc25hcFBvaW50cyA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50c1tzbmFwUG9pbnRzLmxlbmd0aCAtIDFdKSB8fCBudWxsLCBbXG4gICAgICAgIHNuYXBQb2ludHMsXG4gICAgICAgIGFjdGl2ZVNuYXBQb2ludFxuICAgIF0pO1xuICAgIGNvbnN0IGFjdGl2ZVNuYXBQb2ludEluZGV4ID0gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+c25hcFBvaW50cyA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50cy5maW5kSW5kZXgoKHNuYXBQb2ludCk9PnNuYXBQb2ludCA9PT0gYWN0aXZlU25hcFBvaW50KSwgW1xuICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnRcbiAgICBdKTtcbiAgICBjb25zdCBzaG91bGRGYWRlID0gc25hcFBvaW50cyAmJiBzbmFwUG9pbnRzLmxlbmd0aCA+IDAgJiYgKGZhZGVGcm9tSW5kZXggfHwgZmFkZUZyb21JbmRleCA9PT0gMCkgJiYgIU51bWJlci5pc05hTihmYWRlRnJvbUluZGV4KSAmJiBzbmFwUG9pbnRzW2ZhZGVGcm9tSW5kZXhdID09PSBhY3RpdmVTbmFwUG9pbnQgfHwgIXNuYXBQb2ludHM7XG4gICAgY29uc3Qgc25hcFBvaW50c09mZnNldCA9IFJlYWN0X19kZWZhdWx0LnVzZU1lbW8oKCk9PntcbiAgICAgICAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGNvbnRhaW5lciA/IHtcbiAgICAgICAgICAgIHdpZHRoOiBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcbiAgICAgICAgfSA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8ge1xuICAgICAgICAgICAgd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgIH07XG4gICAgICAgIHZhciBfc25hcFBvaW50c19tYXA7XG4gICAgICAgIHJldHVybiAoX3NuYXBQb2ludHNfbWFwID0gc25hcFBvaW50cyA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50cy5tYXAoKHNuYXBQb2ludCk9PntcbiAgICAgICAgICAgIGNvbnN0IGlzUHggPSB0eXBlb2Ygc25hcFBvaW50ID09PSAnc3RyaW5nJztcbiAgICAgICAgICAgIGxldCBzbmFwUG9pbnRBc051bWJlciA9IDA7XG4gICAgICAgICAgICBpZiAoaXNQeCkge1xuICAgICAgICAgICAgICAgIHNuYXBQb2ludEFzTnVtYmVyID0gcGFyc2VJbnQoc25hcFBvaW50LCAxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbChkaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gaXNQeCA/IHNuYXBQb2ludEFzTnVtYmVyIDogd2luZG93RGltZW5zaW9ucyA/IHNuYXBQb2ludCAqIGNvbnRhaW5lclNpemUuaGVpZ2h0IDogMDtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93RGltZW5zaW9ucykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uID09PSAnYm90dG9tJyA/IGNvbnRhaW5lclNpemUuaGVpZ2h0IC0gaGVpZ2h0IDogLWNvbnRhaW5lclNpemUuaGVpZ2h0ICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpc1B4ID8gc25hcFBvaW50QXNOdW1iZXIgOiB3aW5kb3dEaW1lbnNpb25zID8gc25hcFBvaW50ICogY29udGFpbmVyU2l6ZS53aWR0aCA6IDA7XG4gICAgICAgICAgICBpZiAod2luZG93RGltZW5zaW9ucykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyBjb250YWluZXJTaXplLndpZHRoIC0gd2lkdGggOiAtY29udGFpbmVyU2l6ZS53aWR0aCArIHdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgICAgICB9KSkgIT0gbnVsbCA/IF9zbmFwUG9pbnRzX21hcCA6IFtdO1xuICAgIH0sIFtcbiAgICAgICAgc25hcFBvaW50cyxcbiAgICAgICAgd2luZG93RGltZW5zaW9ucyxcbiAgICAgICAgY29udGFpbmVyXG4gICAgXSk7XG4gICAgY29uc3QgYWN0aXZlU25hcFBvaW50T2Zmc2V0ID0gUmVhY3RfX2RlZmF1bHQudXNlTWVtbygoKT0+YWN0aXZlU25hcFBvaW50SW5kZXggIT09IG51bGwgPyBzbmFwUG9pbnRzT2Zmc2V0ID09IG51bGwgPyB2b2lkIDAgOiBzbmFwUG9pbnRzT2Zmc2V0W2FjdGl2ZVNuYXBQb2ludEluZGV4XSA6IG51bGwsIFtcbiAgICAgICAgc25hcFBvaW50c09mZnNldCxcbiAgICAgICAgYWN0aXZlU25hcFBvaW50SW5kZXhcbiAgICBdKTtcbiAgICBjb25zdCBzbmFwVG9Qb2ludCA9IFJlYWN0X19kZWZhdWx0LnVzZUNhbGxiYWNrKChkaW1lbnNpb24pPT57XG4gICAgICAgIHZhciBfc25hcFBvaW50c09mZnNldF9maW5kSW5kZXg7XG4gICAgICAgIGNvbnN0IG5ld1NuYXBQb2ludEluZGV4ID0gKF9zbmFwUG9pbnRzT2Zmc2V0X2ZpbmRJbmRleCA9IHNuYXBQb2ludHNPZmZzZXQgPT0gbnVsbCA/IHZvaWQgMCA6IHNuYXBQb2ludHNPZmZzZXQuZmluZEluZGV4KChzbmFwUG9pbnREaW0pPT5zbmFwUG9pbnREaW0gPT09IGRpbWVuc2lvbikpICE9IG51bGwgPyBfc25hcFBvaW50c09mZnNldF9maW5kSW5kZXggOiBudWxsO1xuICAgICAgICBvblNuYXBQb2ludENoYW5nZShuZXdTbmFwUG9pbnRJbmRleCk7XG4gICAgICAgIHNldChkcmF3ZXJSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke1RSQU5TSVRJT05TLkRVUkFUSU9OfXMgY3ViaWMtYmV6aWVyKCR7VFJBTlNJVElPTlMuRUFTRS5qb2luKCcsJyl9KWAsXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGB0cmFuc2xhdGUzZCgwLCAke2RpbWVuc2lvbn1weCwgMClgIDogYHRyYW5zbGF0ZTNkKCR7ZGltZW5zaW9ufXB4LCAwLCAwKWBcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzbmFwUG9pbnRzT2Zmc2V0ICYmIG5ld1NuYXBQb2ludEluZGV4ICE9PSBzbmFwUG9pbnRzT2Zmc2V0Lmxlbmd0aCAtIDEgJiYgbmV3U25hcFBvaW50SW5kZXggIT09IGZhZGVGcm9tSW5kZXggJiYgbmV3U25hcFBvaW50SW5kZXggPCBmYWRlRnJvbUluZGV4KSB7XG4gICAgICAgICAgICBzZXQob3ZlcmxheVJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcwJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXQob3ZlcmxheVJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6ICcxJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0QWN0aXZlU25hcFBvaW50KHNuYXBQb2ludHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNuYXBQb2ludHNbTWF0aC5tYXgobmV3U25hcFBvaW50SW5kZXgsIDApXSk7XG4gICAgfSwgW1xuICAgICAgICBkcmF3ZXJSZWYuY3VycmVudCxcbiAgICAgICAgc25hcFBvaW50cyxcbiAgICAgICAgc25hcFBvaW50c09mZnNldCxcbiAgICAgICAgZmFkZUZyb21JbmRleCxcbiAgICAgICAgb3ZlcmxheVJlZixcbiAgICAgICAgc2V0QWN0aXZlU25hcFBvaW50XG4gICAgXSk7XG4gICAgUmVhY3RfX2RlZmF1bHQudXNlRWZmZWN0KCgpPT57XG4gICAgICAgIGlmIChhY3RpdmVTbmFwUG9pbnQgfHwgYWN0aXZlU25hcFBvaW50UHJvcCkge1xuICAgICAgICAgICAgdmFyIF9zbmFwUG9pbnRzX2ZpbmRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gKF9zbmFwUG9pbnRzX2ZpbmRJbmRleCA9IHNuYXBQb2ludHMgPT0gbnVsbCA/IHZvaWQgMCA6IHNuYXBQb2ludHMuZmluZEluZGV4KChzbmFwUG9pbnQpPT5zbmFwUG9pbnQgPT09IGFjdGl2ZVNuYXBQb2ludFByb3AgfHwgc25hcFBvaW50ID09PSBhY3RpdmVTbmFwUG9pbnQpKSAhPSBudWxsID8gX3NuYXBQb2ludHNfZmluZEluZGV4IDogLTE7XG4gICAgICAgICAgICBpZiAoc25hcFBvaW50c09mZnNldCAmJiBuZXdJbmRleCAhPT0gLTEgJiYgdHlwZW9mIHNuYXBQb2ludHNPZmZzZXRbbmV3SW5kZXhdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHNuYXBUb1BvaW50KHNuYXBQb2ludHNPZmZzZXRbbmV3SW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgYWN0aXZlU25hcFBvaW50LFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnRQcm9wLFxuICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICBzbmFwUG9pbnRzT2Zmc2V0LFxuICAgICAgICBzbmFwVG9Qb2ludFxuICAgIF0pO1xuICAgIGZ1bmN0aW9uIG9uUmVsZWFzZSh7IGRyYWdnZWREaXN0YW5jZSwgY2xvc2VEcmF3ZXIsIHZlbG9jaXR5LCBkaXNtaXNzaWJsZSB9KSB7XG4gICAgICAgIGlmIChmYWRlRnJvbUluZGV4ID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgY3VycmVudFBvc2l0aW9uID0gZGlyZWN0aW9uID09PSAnYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcgPyAoYWN0aXZlU25hcFBvaW50T2Zmc2V0ICE9IG51bGwgPyBhY3RpdmVTbmFwUG9pbnRPZmZzZXQgOiAwKSAtIGRyYWdnZWREaXN0YW5jZSA6IChhY3RpdmVTbmFwUG9pbnRPZmZzZXQgIT0gbnVsbCA/IGFjdGl2ZVNuYXBQb2ludE9mZnNldCA6IDApICsgZHJhZ2dlZERpc3RhbmNlO1xuICAgICAgICBjb25zdCBpc092ZXJsYXlTbmFwUG9pbnQgPSBhY3RpdmVTbmFwUG9pbnRJbmRleCA9PT0gZmFkZUZyb21JbmRleCAtIDE7XG4gICAgICAgIGNvbnN0IGlzRmlyc3QgPSBhY3RpdmVTbmFwUG9pbnRJbmRleCA9PT0gMDtcbiAgICAgICAgY29uc3QgaGFzRHJhZ2dlZFVwID0gZHJhZ2dlZERpc3RhbmNlID4gMDtcbiAgICAgICAgaWYgKGlzT3ZlcmxheVNuYXBQb2ludCkge1xuICAgICAgICAgICAgc2V0KG92ZXJsYXlSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7VFJBTlNJVElPTlMuRFVSQVRJT059cyBjdWJpYy1iZXppZXIoJHtUUkFOU0lUSU9OUy5FQVNFLmpvaW4oJywnKX0pYFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzbmFwVG9TZXF1ZW50aWFsUG9pbnQgJiYgdmVsb2NpdHkgPiAyICYmICFoYXNEcmFnZ2VkVXApIHtcbiAgICAgICAgICAgIGlmIChkaXNtaXNzaWJsZSkgY2xvc2VEcmF3ZXIoKTtcbiAgICAgICAgICAgIGVsc2Ugc25hcFRvUG9pbnQoc25hcFBvaW50c09mZnNldFswXSk7IC8vIHNuYXAgdG8gaW5pdGlhbCBwb2ludFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc25hcFRvU2VxdWVudGlhbFBvaW50ICYmIHZlbG9jaXR5ID4gMiAmJiBoYXNEcmFnZ2VkVXAgJiYgc25hcFBvaW50c09mZnNldCAmJiBzbmFwUG9pbnRzKSB7XG4gICAgICAgICAgICBzbmFwVG9Qb2ludChzbmFwUG9pbnRzT2Zmc2V0W3NuYXBQb2ludHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgc25hcCBwb2ludCB0byB0aGUgY3VycmVudCBwb3NpdGlvblxuICAgICAgICBjb25zdCBjbG9zZXN0U25hcFBvaW50ID0gc25hcFBvaW50c09mZnNldCA9PSBudWxsID8gdm9pZCAwIDogc25hcFBvaW50c09mZnNldC5yZWR1Y2UoKHByZXYsIGN1cnIpPT57XG4gICAgICAgICAgICBpZiAodHlwZW9mIHByZXYgIT09ICdudW1iZXInIHx8IHR5cGVvZiBjdXJyICE9PSAnbnVtYmVyJykgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hYnMoY3VyciAtIGN1cnJlbnRQb3NpdGlvbikgPCBNYXRoLmFicyhwcmV2IC0gY3VycmVudFBvc2l0aW9uKSA/IGN1cnIgOiBwcmV2O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZGltID0gaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gd2luZG93LmlubmVySGVpZ2h0IDogd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIGlmICh2ZWxvY2l0eSA+IFZFTE9DSVRZX1RIUkVTSE9MRCAmJiBNYXRoLmFicyhkcmFnZ2VkRGlzdGFuY2UpIDwgZGltICogMC40KSB7XG4gICAgICAgICAgICBjb25zdCBkcmFnRGlyZWN0aW9uID0gaGFzRHJhZ2dlZFVwID8gMSA6IC0xOyAvLyAxID0gdXAsIC0xID0gZG93blxuICAgICAgICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgd2Ugc3dpcGUgdXB3YXJkcyB3aGlsZSBiZWluZyBvbiB0aGUgbGFzdCBzbmFwIHBvaW50XG4gICAgICAgICAgICBpZiAoZHJhZ0RpcmVjdGlvbiA+IDAgJiYgaXNMYXN0U25hcFBvaW50KSB7XG4gICAgICAgICAgICAgICAgc25hcFRvUG9pbnQoc25hcFBvaW50c09mZnNldFtzbmFwUG9pbnRzLmxlbmd0aCAtIDFdKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNGaXJzdCAmJiBkcmFnRGlyZWN0aW9uIDwgMCAmJiBkaXNtaXNzaWJsZSkge1xuICAgICAgICAgICAgICAgIGNsb3NlRHJhd2VyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWN0aXZlU25hcFBvaW50SW5kZXggPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgICAgIHNuYXBUb1BvaW50KHNuYXBQb2ludHNPZmZzZXRbYWN0aXZlU25hcFBvaW50SW5kZXggKyBkcmFnRGlyZWN0aW9uXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc25hcFRvUG9pbnQoY2xvc2VzdFNuYXBQb2ludCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZyh7IGRyYWdnZWREaXN0YW5jZSB9KSB7XG4gICAgICAgIGlmIChhY3RpdmVTbmFwUG9pbnRPZmZzZXQgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBkaXJlY3Rpb24gPT09ICdib3R0b20nIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/IGFjdGl2ZVNuYXBQb2ludE9mZnNldCAtIGRyYWdnZWREaXN0YW5jZSA6IGFjdGl2ZVNuYXBQb2ludE9mZnNldCArIGRyYWdnZWREaXN0YW5jZTtcbiAgICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgd2UgZXhjZWVkIHRoZSBsYXN0KGJpZ2dlc3QpIHNuYXAgcG9pbnRcbiAgICAgICAgaWYgKChkaXJlY3Rpb24gPT09ICdib3R0b20nIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JykgJiYgbmV3VmFsdWUgPCBzbmFwUG9pbnRzT2Zmc2V0W3NuYXBQb2ludHNPZmZzZXQubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGRpcmVjdGlvbiA9PT0gJ3RvcCcgfHwgZGlyZWN0aW9uID09PSAnbGVmdCcpICYmIG5ld1ZhbHVlID4gc25hcFBvaW50c09mZnNldFtzbmFwUG9pbnRzT2Zmc2V0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGB0cmFuc2xhdGUzZCgwLCAke25ld1ZhbHVlfXB4LCAwKWAgOiBgdHJhbnNsYXRlM2QoJHtuZXdWYWx1ZX1weCwgMCwgMClgXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRQZXJjZW50YWdlRHJhZ2dlZChhYnNEcmFnZ2VkRGlzdGFuY2UsIGlzRHJhZ2dpbmdEb3duKSB7XG4gICAgICAgIGlmICghc25hcFBvaW50cyB8fCB0eXBlb2YgYWN0aXZlU25hcFBvaW50SW5kZXggIT09ICdudW1iZXInIHx8ICFzbmFwUG9pbnRzT2Zmc2V0IHx8IGZhZGVGcm9tSW5kZXggPT09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgdHJ1ZSB3ZSBhcmUgZHJhZ2dpbmcgdG8gYSBzbmFwIHBvaW50IHRoYXQgaXMgc3VwcG9zZWQgdG8gaGF2ZSBhbiBvdmVybGF5XG4gICAgICAgIGNvbnN0IGlzT3ZlcmxheVNuYXBQb2ludCA9IGFjdGl2ZVNuYXBQb2ludEluZGV4ID09PSBmYWRlRnJvbUluZGV4IC0gMTtcbiAgICAgICAgY29uc3QgaXNPdmVybGF5U25hcFBvaW50T3JIaWdoZXIgPSBhY3RpdmVTbmFwUG9pbnRJbmRleCA+PSBmYWRlRnJvbUluZGV4O1xuICAgICAgICBpZiAoaXNPdmVybGF5U25hcFBvaW50T3JIaWdoZXIgJiYgaXNEcmFnZ2luZ0Rvd24pIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvbid0IGFuaW1hdGUsIGJ1dCBzdGlsbCB1c2UgdGhpcyBvbmUgaWYgd2UgYXJlIGRyYWdnaW5nIGF3YXkgZnJvbSB0aGUgb3ZlcmxheVNuYXBQb2ludFxuICAgICAgICBpZiAoaXNPdmVybGF5U25hcFBvaW50ICYmICFpc0RyYWdnaW5nRG93bikgcmV0dXJuIDE7XG4gICAgICAgIGlmICghc2hvdWxkRmFkZSAmJiAhaXNPdmVybGF5U25hcFBvaW50KSByZXR1cm4gbnVsbDtcbiAgICAgICAgLy8gRWl0aGVyIGZhZGVGcm9tIGluZGV4IG9yIHRoZSBvbmUgYmVmb3JlXG4gICAgICAgIGNvbnN0IHRhcmdldFNuYXBQb2ludEluZGV4ID0gaXNPdmVybGF5U25hcFBvaW50ID8gYWN0aXZlU25hcFBvaW50SW5kZXggKyAxIDogYWN0aXZlU25hcFBvaW50SW5kZXggLSAxO1xuICAgICAgICAvLyBHZXQgdGhlIGRpc3RhbmNlIGZyb20gb3ZlcmxheVNuYXBQb2ludCB0byB0aGUgb25lIGJlZm9yZSBvciB2aWNlLXZlcnNhIHRvIGNhbGN1bGF0ZSB0aGUgb3BhY2l0eSBwZXJjZW50YWdlIGFjY29yZGluZ2x5XG4gICAgICAgIGNvbnN0IHNuYXBQb2ludERpc3RhbmNlID0gaXNPdmVybGF5U25hcFBvaW50ID8gc25hcFBvaW50c09mZnNldFt0YXJnZXRTbmFwUG9pbnRJbmRleF0gLSBzbmFwUG9pbnRzT2Zmc2V0W3RhcmdldFNuYXBQb2ludEluZGV4IC0gMV0gOiBzbmFwUG9pbnRzT2Zmc2V0W3RhcmdldFNuYXBQb2ludEluZGV4ICsgMV0gLSBzbmFwUG9pbnRzT2Zmc2V0W3RhcmdldFNuYXBQb2ludEluZGV4XTtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZURyYWdnZWQgPSBhYnNEcmFnZ2VkRGlzdGFuY2UgLyBNYXRoLmFicyhzbmFwUG9pbnREaXN0YW5jZSk7XG4gICAgICAgIGlmIChpc092ZXJsYXlTbmFwUG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxIC0gcGVyY2VudGFnZURyYWdnZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyY2VudGFnZURyYWdnZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNMYXN0U25hcFBvaW50LFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnQsXG4gICAgICAgIHNob3VsZEZhZGUsXG4gICAgICAgIGdldFBlcmNlbnRhZ2VEcmFnZ2VkLFxuICAgICAgICBzZXRBY3RpdmVTbmFwUG9pbnQsXG4gICAgICAgIGFjdGl2ZVNuYXBQb2ludEluZGV4LFxuICAgICAgICBvblJlbGVhc2UsXG4gICAgICAgIG9uRHJhZyxcbiAgICAgICAgc25hcFBvaW50c09mZnNldFxuICAgIH07XG59XG5cbmNvbnN0IG5vb3AgPSAoKT0+KCk9Pnt9O1xuZnVuY3Rpb24gdXNlU2NhbGVCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHsgZGlyZWN0aW9uLCBpc09wZW4sIHNob3VsZFNjYWxlQmFja2dyb3VuZCwgc2V0QmFja2dyb3VuZENvbG9yT25TY2FsZSwgbm9Cb2R5U3R5bGVzIH0gPSB1c2VEcmF3ZXJDb250ZXh0KCk7XG4gICAgY29uc3QgdGltZW91dElkUmVmID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IGluaXRpYWxCYWNrZ3JvdW5kQ29sb3IgPSB1c2VNZW1vKCgpPT5kb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciwgW10pO1xuICAgIGZ1bmN0aW9uIGdldFNjYWxlKCkge1xuICAgICAgICByZXR1cm4gKHdpbmRvdy5pbm5lcldpZHRoIC0gV0lORE9XX1RPUF9PRkZTRVQpIC8gd2luZG93LmlubmVyV2lkdGg7XG4gICAgfVxuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoaXNPcGVuICYmIHNob3VsZFNjYWxlQmFja2dyb3VuZCkge1xuICAgICAgICAgICAgaWYgKHRpbWVvdXRJZFJlZi5jdXJyZW50KSBjbGVhclRpbWVvdXQodGltZW91dElkUmVmLmN1cnJlbnQpO1xuICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXZhdWwtZHJhd2VyLXdyYXBwZXJdJykgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW3ZhdWwtZHJhd2VyLXdyYXBwZXJdJyk7XG4gICAgICAgICAgICBpZiAoIXdyYXBwZXIpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGJvZHlBbmRXcmFwcGVyQ2xlYW51cCA9IGNoYWluKHNldEJhY2tncm91bmRDb2xvck9uU2NhbGUgJiYgIW5vQm9keVN0eWxlcyA/IGFzc2lnblN0eWxlKGRvY3VtZW50LmJvZHksIHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnYmxhY2snXG4gICAgICAgICAgICB9KSA6IG5vb3AsIGFzc2lnblN0eWxlKHdyYXBwZXIsIHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/ICd0b3AnIDogJ2xlZnQnLFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogJ3RyYW5zZm9ybSwgYm9yZGVyLXJhZGl1cycsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBgJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zYCxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IGBjdWJpYy1iZXppZXIoJHtUUkFOU0lUSU9OUy5FQVNFLmpvaW4oJywnKX0pYFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgY29uc3Qgd3JhcHBlclN0eWxlc0NsZWFudXAgPSBhc3NpZ25TdHlsZSh3cmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBgJHtCT1JERVJfUkFESVVTfXB4YCxcbiAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgICAgICAgLi4uaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8ge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2dldFNjYWxlKCl9KSB0cmFuc2xhdGUzZCgwLCBjYWxjKGVudihzYWZlLWFyZWEtaW5zZXQtdG9wKSArIDE0cHgpLCAwKWBcbiAgICAgICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2dldFNjYWxlKCl9KSB0cmFuc2xhdGUzZChjYWxjKGVudihzYWZlLWFyZWEtaW5zZXQtdG9wKSArIDE0cHgpLCAwLCAwKWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgICAgIHdyYXBwZXJTdHlsZXNDbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgdGltZW91dElkUmVmLmN1cnJlbnQgPSB3aW5kb3cuc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgICAgICBib2R5QW5kV3JhcHBlckNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWxCYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9IGluaXRpYWxCYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdiYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBUUkFOU0lUSU9OUy5EVVJBVElPTiAqIDEwMDApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sIFtcbiAgICAgICAgaXNPcGVuLFxuICAgICAgICBzaG91bGRTY2FsZUJhY2tncm91bmQsXG4gICAgICAgIGluaXRpYWxCYWNrZ3JvdW5kQ29sb3JcbiAgICBdKTtcbn1cblxuZnVuY3Rpb24gUm9vdCh7IG9wZW46IG9wZW5Qcm9wLCBvbk9wZW5DaGFuZ2UsIGNoaWxkcmVuLCBvbkRyYWc6IG9uRHJhZ1Byb3AsIG9uUmVsZWFzZTogb25SZWxlYXNlUHJvcCwgc25hcFBvaW50cywgc2hvdWxkU2NhbGVCYWNrZ3JvdW5kID0gZmFsc2UsIHNldEJhY2tncm91bmRDb2xvck9uU2NhbGUgPSB0cnVlLCBjbG9zZVRocmVzaG9sZCA9IENMT1NFX1RIUkVTSE9MRCwgc2Nyb2xsTG9ja1RpbWVvdXQgPSBTQ1JPTExfTE9DS19USU1FT1VULCBkaXNtaXNzaWJsZSA9IHRydWUsIGhhbmRsZU9ubHkgPSBmYWxzZSwgZmFkZUZyb21JbmRleCA9IHNuYXBQb2ludHMgJiYgc25hcFBvaW50cy5sZW5ndGggLSAxLCBhY3RpdmVTbmFwUG9pbnQ6IGFjdGl2ZVNuYXBQb2ludFByb3AsIHNldEFjdGl2ZVNuYXBQb2ludDogc2V0QWN0aXZlU25hcFBvaW50UHJvcCwgZml4ZWQsIG1vZGFsID0gdHJ1ZSwgb25DbG9zZSwgbm9Cb2R5U3R5bGVzLCBkaXJlY3Rpb24gPSAnYm90dG9tJywgZGVmYXVsdE9wZW4gPSBmYWxzZSwgZGlzYWJsZVByZXZlbnRTY3JvbGwgPSB0cnVlLCBzbmFwVG9TZXF1ZW50aWFsUG9pbnQgPSBmYWxzZSwgcmVwb3NpdGlvbklucHV0cyA9IHRydWUsIG9uQW5pbWF0aW9uRW5kLCBjb250YWluZXIgfSkge1xuICAgIHZhciBfZHJhd2VyUmVmX2N1cnJlbnQ7XG4gICAgY29uc3QgW2lzT3BlbiA9IGZhbHNlLCBzZXRJc09wZW5dID0gdXNlQ29udHJvbGxhYmxlU3RhdGUoe1xuICAgICAgICBkZWZhdWx0UHJvcDogZGVmYXVsdE9wZW4sXG4gICAgICAgIHByb3A6IG9wZW5Qcm9wLFxuICAgICAgICBvbkNoYW5nZTogKG8pPT57XG4gICAgICAgICAgICBvbk9wZW5DaGFuZ2UgPT0gbnVsbCA/IHZvaWQgMCA6IG9uT3BlbkNoYW5nZShvKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvbkVuZCA9PSBudWxsID8gdm9pZCAwIDogb25BbmltYXRpb25FbmQobyk7XG4gICAgICAgICAgICB9LCBUUkFOU0lUSU9OUy5EVVJBVElPTiAqIDEwMDApO1xuICAgICAgICAgICAgaWYgKG8gJiYgIW1vZGFsKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+e1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYXV0byc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBbaGFzQmVlbk9wZW5lZCwgc2V0SGFzQmVlbk9wZW5lZF0gPSBSZWFjdF9fZGVmYXVsdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2lzRHJhZ2dpbmcsIHNldElzRHJhZ2dpbmddID0gUmVhY3RfX2RlZmF1bHQudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IFtqdXN0UmVsZWFzZWQsIHNldEp1c3RSZWxlYXNlZF0gPSBSZWFjdF9fZGVmYXVsdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3Qgb3ZlcmxheVJlZiA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBvcGVuVGltZSA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBkcmFnU3RhcnRUaW1lID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IGRyYWdFbmRUaW1lID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKG51bGwpO1xuICAgIGNvbnN0IGxhc3RUaW1lRHJhZ1ByZXZlbnRlZCA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBpc0FsbG93ZWRUb0RyYWcgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IG5lc3RlZE9wZW5DaGFuZ2VUaW1lciA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBwb2ludGVyU3RhcnQgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoMCk7XG4gICAgY29uc3Qga2V5Ym9hcmRJc09wZW4gPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IHByZXZpb3VzRGlmZkZyb21Jbml0aWFsID0gUmVhY3RfX2RlZmF1bHQudXNlUmVmKDApO1xuICAgIGNvbnN0IGRyYXdlclJlZiA9IFJlYWN0X19kZWZhdWx0LnVzZVJlZihudWxsKTtcbiAgICBjb25zdCBkcmF3ZXJIZWlnaHRSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoKChfZHJhd2VyUmVmX2N1cnJlbnQgPSBkcmF3ZXJSZWYuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kcmF3ZXJSZWZfY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQpIHx8IDApO1xuICAgIGNvbnN0IGluaXRpYWxEcmF3ZXJIZWlnaHQgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoMCk7XG4gICAgY29uc3Qgb25TbmFwUG9pbnRDaGFuZ2UgPSBSZWFjdF9fZGVmYXVsdC51c2VDYWxsYmFjaygoYWN0aXZlU25hcFBvaW50SW5kZXgpPT57XG4gICAgICAgIC8vIENoYW5nZSBvcGVuVGltZSByZWYgd2hlbiB3ZSByZWFjaCB0aGUgbGFzdCBzbmFwIHBvaW50IHRvIHByZXZlbnQgZHJhZ2dpbmcgZm9yIDUwMG1zIGluY2FzZSBpdCdzIHNjcm9sbGFibGUuXG4gICAgICAgIGlmIChzbmFwUG9pbnRzICYmIGFjdGl2ZVNuYXBQb2ludEluZGV4ID09PSBzbmFwUG9pbnRzT2Zmc2V0Lmxlbmd0aCAtIDEpIG9wZW5UaW1lLmN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCB7IGFjdGl2ZVNuYXBQb2ludCwgYWN0aXZlU25hcFBvaW50SW5kZXgsIHNldEFjdGl2ZVNuYXBQb2ludCwgb25SZWxlYXNlOiBvblJlbGVhc2VTbmFwUG9pbnRzLCBzbmFwUG9pbnRzT2Zmc2V0LCBvbkRyYWc6IG9uRHJhZ1NuYXBQb2ludHMsIHNob3VsZEZhZGUsIGdldFBlcmNlbnRhZ2VEcmFnZ2VkOiBnZXRTbmFwUG9pbnRzUGVyY2VudGFnZURyYWdnZWQgfSA9IHVzZVNuYXBQb2ludHMoe1xuICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICBhY3RpdmVTbmFwUG9pbnRQcm9wLFxuICAgICAgICBzZXRBY3RpdmVTbmFwUG9pbnRQcm9wLFxuICAgICAgICBkcmF3ZXJSZWYsXG4gICAgICAgIGZhZGVGcm9tSW5kZXgsXG4gICAgICAgIG92ZXJsYXlSZWYsXG4gICAgICAgIG9uU25hcFBvaW50Q2hhbmdlLFxuICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgc25hcFRvU2VxdWVudGlhbFBvaW50XG4gICAgfSk7XG4gICAgdXNlUHJldmVudFNjcm9sbCh7XG4gICAgICAgIGlzRGlzYWJsZWQ6ICFpc09wZW4gfHwgaXNEcmFnZ2luZyB8fCAhbW9kYWwgfHwganVzdFJlbGVhc2VkIHx8ICFoYXNCZWVuT3BlbmVkIHx8ICFyZXBvc2l0aW9uSW5wdXRzIHx8ICFkaXNhYmxlUHJldmVudFNjcm9sbFxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGdldFNjYWxlKCkge1xuICAgICAgICByZXR1cm4gKHdpbmRvdy5pbm5lcldpZHRoIC0gV0lORE9XX1RPUF9PRkZTRVQpIC8gd2luZG93LmlubmVyV2lkdGg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUHJlc3MoZXZlbnQpIHtcbiAgICAgICAgdmFyIF9kcmF3ZXJSZWZfY3VycmVudDtcbiAgICAgICAgaWYgKCFkaXNtaXNzaWJsZSAmJiAhc25hcFBvaW50cykgcmV0dXJuO1xuICAgICAgICBpZiAoZHJhd2VyUmVmLmN1cnJlbnQgJiYgIWRyYXdlclJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHJldHVybjtcbiAgICAgICAgZHJhd2VySGVpZ2h0UmVmLmN1cnJlbnQgPSAoKF9kcmF3ZXJSZWZfY3VycmVudCA9IGRyYXdlclJlZi5jdXJyZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2RyYXdlclJlZl9jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCkgfHwgMDtcbiAgICAgICAgc2V0SXNEcmFnZ2luZyh0cnVlKTtcbiAgICAgICAgZHJhZ1N0YXJ0VGltZS5jdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICAgICAgLy8gaU9TIGRvZXNuJ3QgdHJpZ2dlciBtb3VzZVVwIGFmdGVyIHNjcm9sbGluZyBzbyB3ZSBuZWVkIHRvIGxpc3RlbiB0byB0b3VjaGVkIGluIG9yZGVyIHRvIGRpc2FsbG93IGRyYWdnaW5nXG4gICAgICAgIGlmIChpc0lPUygpKSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoKT0+aXNBbGxvd2VkVG9EcmFnLmN1cnJlbnQgPSBmYWxzZSwge1xuICAgICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB3ZSBtYWludGFpbiBjb3JyZWN0IHBvaW50ZXIgY2FwdHVyZSBldmVuIHdoZW4gZ29pbmcgb3V0c2lkZSBvZiB0aGUgZHJhd2VyXG4gICAgICAgIGV2ZW50LnRhcmdldC5zZXRQb2ludGVyQ2FwdHVyZShldmVudC5wb2ludGVySWQpO1xuICAgICAgICBwb2ludGVyU3RhcnQuY3VycmVudCA9IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGV2ZW50LmNsaWVudFkgOiBldmVudC5jbGllbnRYO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaG91bGREcmFnKGVsLCBpc0RyYWdnaW5nSW5EaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIF93aW5kb3dfZ2V0U2VsZWN0aW9uLCBfbGFzdFRpbWVEcmFnUHJldmVudGVkX2N1cnJlbnQ7XG4gICAgICAgIGxldCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodGVkVGV4dCA9IChfd2luZG93X2dldFNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3dfZ2V0U2VsZWN0aW9uLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHN3aXBlQW1vdW50ID0gZHJhd2VyUmVmLmN1cnJlbnQgPyBnZXRUcmFuc2xhdGUoZHJhd2VyUmVmLmN1cnJlbnQsIGRpcmVjdGlvbikgOiBudWxsO1xuICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgaWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLXZhdWwtbm8tZHJhZycpIHx8IGVsZW1lbnQuY2xvc2VzdCgnW2RhdGEtdmF1bC1uby1kcmFnXScpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb3cgc2Nyb2xsaW5nIHdoZW4gYW5pbWF0aW5nXG4gICAgICAgIGlmIChvcGVuVGltZS5jdXJyZW50ICYmIGRhdGUuZ2V0VGltZSgpIC0gb3BlblRpbWUuY3VycmVudC5nZXRUaW1lKCkgPCA1MDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVBbW91bnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdib3R0b20nID8gc3dpcGVBbW91bnQgPiAwIDogc3dpcGVBbW91bnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRG9uJ3QgZHJhZyBpZiB0aGVyZSdzIGhpZ2hsaWdodGVkIHRleHRcbiAgICAgICAgaWYgKGhpZ2hsaWdodGVkVGV4dCAmJiBoaWdobGlnaHRlZFRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIERpc2FsbG93IGRyYWdnaW5nIGlmIGRyYXdlciB3YXMgc2Nyb2xsZWQgd2l0aGluIGBzY3JvbGxMb2NrVGltZW91dGBcbiAgICAgICAgaWYgKGRhdGUuZ2V0VGltZSgpIC0gKChfbGFzdFRpbWVEcmFnUHJldmVudGVkX2N1cnJlbnQgPSBsYXN0VGltZURyYWdQcmV2ZW50ZWQuY3VycmVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sYXN0VGltZURyYWdQcmV2ZW50ZWRfY3VycmVudC5nZXRUaW1lKCkpIDwgc2Nyb2xsTG9ja1RpbWVvdXQgJiYgc3dpcGVBbW91bnQgPT09IDApIHtcbiAgICAgICAgICAgIGxhc3RUaW1lRHJhZ1ByZXZlbnRlZC5jdXJyZW50ID0gZGF0ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEcmFnZ2luZ0luRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBsYXN0VGltZURyYWdQcmV2ZW50ZWQuY3VycmVudCA9IGRhdGU7XG4gICAgICAgICAgICAvLyBXZSBhcmUgZHJhZ2dpbmcgZG93biBzbyB3ZSBzaG91bGQgYWxsb3cgc2Nyb2xsaW5nXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gS2VlcCBjbGltYmluZyB1cCB0aGUgRE9NIHRyZWUgYXMgbG9uZyBhcyB0aGVyZSdzIGEgcGFyZW50XG4gICAgICAgIHdoaWxlKGVsZW1lbnQpe1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZWxlbWVudC5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5zY3JvbGxUb3AgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRpbWVEcmFnUHJldmVudGVkLmN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlIGFuZCBub3Qgc2Nyb2xsZWQgdG8gdGhlIHRvcCwgc28gZG9uJ3QgZHJhZ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAnZGlhbG9nJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNb3ZlIHVwIHRvIHRoZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBzY3JvbGxhYmxlIHBhcmVudHMgbm90IHNjcm9sbGVkIHRvIHRoZSB0b3AgZm91bmQsIHNvIGRyYWdcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZyhldmVudCkge1xuICAgICAgICBpZiAoIWRyYXdlclJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbmVlZCB0byBrbm93IGhvdyBtdWNoIG9mIHRoZSBkcmF3ZXIgaGFzIGJlZW4gZHJhZ2dlZCBpbiBwZXJjZW50YWdlcyBzbyB0aGF0IHdlIGNhbiB0cmFuc2Zvcm0gYmFja2dyb3VuZCBhY2NvcmRpbmdseVxuICAgICAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uTXVsdGlwbGllciA9IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbScgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnID8gMSA6IC0xO1xuICAgICAgICAgICAgY29uc3QgZHJhZ2dlZERpc3RhbmNlID0gKHBvaW50ZXJTdGFydC5jdXJyZW50IC0gKGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGV2ZW50LmNsaWVudFkgOiBldmVudC5jbGllbnRYKSkgKiBkaXJlY3Rpb25NdWx0aXBsaWVyO1xuICAgICAgICAgICAgY29uc3QgaXNEcmFnZ2luZ0luRGlyZWN0aW9uID0gZHJhZ2dlZERpc3RhbmNlID4gMDtcbiAgICAgICAgICAgIC8vIFByZSBjb25kaXRpb24gZm9yIGRpc2FsbG93aW5nIGRyYWdnaW5nIGluIHRoZSBjbG9zZSBkaXJlY3Rpb24uXG4gICAgICAgICAgICBjb25zdCBub0Nsb3NlU25hcFBvaW50c1ByZUNvbmRpdGlvbiA9IHNuYXBQb2ludHMgJiYgIWRpc21pc3NpYmxlICYmICFpc0RyYWdnaW5nSW5EaXJlY3Rpb247XG4gICAgICAgICAgICAvLyBEaXNhbGxvdyBkcmFnZ2luZyBkb3duIHRvIGNsb3NlIHdoZW4gZmlyc3Qgc25hcCBwb2ludCBpcyB0aGUgYWN0aXZlIG9uZSBhbmQgZGlzbWlzc2libGUgcHJvcCBpcyBzZXQgdG8gZmFsc2UuXG4gICAgICAgICAgICBpZiAobm9DbG9zZVNuYXBQb2ludHNQcmVDb25kaXRpb24gJiYgYWN0aXZlU25hcFBvaW50SW5kZXggPT09IDApIHJldHVybjtcbiAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2FwdHVyZSBsYXN0IHRpbWUgd2hlbiBkcmFnIHdpdGggc2Nyb2xsIHdhcyB0cmlnZ2VyZWQgYW5kIGhhdmUgYSB0aW1lb3V0IGJldHdlZW5cbiAgICAgICAgICAgIGNvbnN0IGFic0RyYWdnZWREaXN0YW5jZSA9IE1hdGguYWJzKGRyYWdnZWREaXN0YW5jZSk7XG4gICAgICAgICAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdmF1bC1kcmF3ZXItd3JhcHBlcl0nKTtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudGFnZSBkcmFnZ2VkLCB3aGVyZSAxIGlzIHRoZSBjbG9zZWQgcG9zaXRpb25cbiAgICAgICAgICAgIGxldCBwZXJjZW50YWdlRHJhZ2dlZCA9IGFic0RyYWdnZWREaXN0YW5jZSAvIGRyYXdlckhlaWdodFJlZi5jdXJyZW50O1xuICAgICAgICAgICAgY29uc3Qgc25hcFBvaW50UGVyY2VudGFnZURyYWdnZWQgPSBnZXRTbmFwUG9pbnRzUGVyY2VudGFnZURyYWdnZWQoYWJzRHJhZ2dlZERpc3RhbmNlLCBpc0RyYWdnaW5nSW5EaXJlY3Rpb24pO1xuICAgICAgICAgICAgaWYgKHNuYXBQb2ludFBlcmNlbnRhZ2VEcmFnZ2VkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZURyYWdnZWQgPSBzbmFwUG9pbnRQZXJjZW50YWdlRHJhZ2dlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERpc2FsbG93IGNsb3NlIGRyYWdnaW5nIGJleW9uZCB0aGUgc21hbGxlc3Qgc25hcCBwb2ludC5cbiAgICAgICAgICAgIGlmIChub0Nsb3NlU25hcFBvaW50c1ByZUNvbmRpdGlvbiAmJiBwZXJjZW50YWdlRHJhZ2dlZCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc0FsbG93ZWRUb0RyYWcuY3VycmVudCAmJiAhc2hvdWxkRHJhZyhldmVudC50YXJnZXQsIGlzRHJhZ2dpbmdJbkRpcmVjdGlvbikpIHJldHVybjtcbiAgICAgICAgICAgIGRyYXdlclJlZi5jdXJyZW50LmNsYXNzTGlzdC5hZGQoRFJBR19DTEFTUyk7XG4gICAgICAgICAgICAvLyBJZiBzaG91bGREcmFnIGdhdmUgdHJ1ZSBvbmNlIGFmdGVyIHByZXNzaW5nIGRvd24gb24gdGhlIGRyYXdlciwgd2Ugc2V0IGlzQWxsb3dlZFRvRHJhZyB0byB0cnVlIGFuZCBpdCB3aWxsIHJlbWFpbiB0cnVlIHVudGlsIHdlIGxldCBnbywgdGhlcmUncyBubyByZWFzb24gdG8gZGlzYWJsZSBkcmFnZ2luZyBtaWQgd2F5LCBldmVyLCBhbmQgdGhhdCdzIHRoZSBzb2x1dGlvbiB0byBpdFxuICAgICAgICAgICAgaXNBbGxvd2VkVG9EcmFnLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ25vbmUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNldChvdmVybGF5UmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNuYXBQb2ludHMpIHtcbiAgICAgICAgICAgICAgICBvbkRyYWdTbmFwUG9pbnRzKHtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dlZERpc3RhbmNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSdW4gdGhpcyBvbmx5IGlmIHNuYXBQb2ludHMgYXJlIG5vdCBkZWZpbmVkIG9yIGlmIHdlIGFyZSBhdCB0aGUgbGFzdCBzbmFwIHBvaW50IChoaWdoZXN0IG9uZSlcbiAgICAgICAgICAgIGlmIChpc0RyYWdnaW5nSW5EaXJlY3Rpb24gJiYgIXNuYXBQb2ludHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYW1wZW5lZERyYWdnZWREaXN0YW5jZSA9IGRhbXBlblZhbHVlKGRyYWdnZWREaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBNYXRoLm1pbihkYW1wZW5lZERyYWdnZWREaXN0YW5jZSAqIC0xLCAwKSAqIGRpcmVjdGlvbk11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gYHRyYW5zbGF0ZTNkKDAsICR7dHJhbnNsYXRlVmFsdWV9cHgsIDApYCA6IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVZhbHVlfXB4LCAwLCAwKWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcGFjaXR5VmFsdWUgPSAxIC0gcGVyY2VudGFnZURyYWdnZWQ7XG4gICAgICAgICAgICBpZiAoc2hvdWxkRmFkZSB8fCBmYWRlRnJvbUluZGV4ICYmIGFjdGl2ZVNuYXBQb2ludEluZGV4ID09PSBmYWRlRnJvbUluZGV4IC0gMSkge1xuICAgICAgICAgICAgICAgIG9uRHJhZ1Byb3AgPT0gbnVsbCA/IHZvaWQgMCA6IG9uRHJhZ1Byb3AoZXZlbnQsIHBlcmNlbnRhZ2VEcmFnZ2VkKTtcbiAgICAgICAgICAgICAgICBzZXQob3ZlcmxheVJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IGAke29wYWNpdHlWYWx1ZX1gLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3cmFwcGVyICYmIG92ZXJsYXlSZWYuY3VycmVudCAmJiBzaG91bGRTY2FsZUJhY2tncm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgcGVyY2VudGFnZURyYWdnZWQgYXMgYSBmcmFjdGlvbiAoMCB0byAxKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlVmFsdWUgPSBNYXRoLm1pbihnZXRTY2FsZSgpICsgcGVyY2VudGFnZURyYWdnZWQgKiAoMSAtIGdldFNjYWxlKCkpLCAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBib3JkZXJSYWRpdXNWYWx1ZSA9IDggLSBwZXJjZW50YWdlRHJhZ2dlZCAqIDg7XG4gICAgICAgICAgICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBNYXRoLm1heCgwLCAxNCAtIHBlcmNlbnRhZ2VEcmFnZ2VkICogMTQpO1xuICAgICAgICAgICAgICAgIHNldCh3cmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogYCR7Ym9yZGVyUmFkaXVzVmFsdWV9cHhgLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGBzY2FsZSgke3NjYWxlVmFsdWV9KSB0cmFuc2xhdGUzZCgwLCAke3RyYW5zbGF0ZVZhbHVlfXB4LCAwKWAgOiBgc2NhbGUoJHtzY2FsZVZhbHVlfSkgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVWYWx1ZX1weCwgMCwgMClgLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZSdcbiAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc25hcFBvaW50cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gYWJzRHJhZ2dlZERpc3RhbmNlICogZGlyZWN0aW9uTXVsdGlwbGllcjtcbiAgICAgICAgICAgICAgICBzZXQoZHJhd2VyUmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBpc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyBgdHJhbnNsYXRlM2QoMCwgJHt0cmFuc2xhdGVWYWx1ZX1weCwgMClgIDogYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlVmFsdWV9cHgsIDAsIDApYFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICB2YXIgX3dpbmRvd192aXN1YWxWaWV3cG9ydDtcbiAgICAgICAgZnVuY3Rpb24gb25WaXN1YWxWaWV3cG9ydENoYW5nZSgpIHtcbiAgICAgICAgICAgIGlmICghZHJhd2VyUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzZWRFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgICAgIGlmIChpc0lucHV0KGZvY3VzZWRFbGVtZW50KSB8fCBrZXlib2FyZElzT3Blbi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIF93aW5kb3dfdmlzdWFsVmlld3BvcnQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdmlzdWFsVmlld3BvcnRIZWlnaHQgPSAoKF93aW5kb3dfdmlzdWFsVmlld3BvcnQgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93X3Zpc3VhbFZpZXdwb3J0LmhlaWdodCkgfHwgMDtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBoZWlnaHQgb2YgdGhlIGtleWJvYXJkXG4gICAgICAgICAgICAgICAgbGV0IGRpZmZGcm9tSW5pdGlhbCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHZpc3VhbFZpZXdwb3J0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGNvbnN0IGRyYXdlckhlaWdodCA9IGRyYXdlclJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCB8fCAwO1xuICAgICAgICAgICAgICAgIGlmICghaW5pdGlhbERyYXdlckhlaWdodC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxEcmF3ZXJIZWlnaHQuY3VycmVudCA9IGRyYXdlckhlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0RnJvbVRvcCA9IGRyYXdlclJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAgICAgICAvLyB2aXN1YWxWaWV3cG9ydCBoZWlnaHQgbWF5IGNoYW5nZSBkdWUgdG8gc29tZSBzdWJ0bGUgY2hhbmdlcyB0byB0aGUga2V5Ym9hcmQuIENoZWNraW5nIGlmIHRoZSBoZWlnaHQgY2hhbmdlZCBieSA2MCBvciBtb3JlIHdpbGwgbWFrZSBzdXJlIHRoYXQgdGhleSBrZXlib2FyZCByZWFsbHkgY2hhbmdlZCBpdHMgb3BlbiBzdGF0ZS5cbiAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMocHJldmlvdXNEaWZmRnJvbUluaXRpYWwuY3VycmVudCAtIGRpZmZGcm9tSW5pdGlhbCkgPiA2MCkge1xuICAgICAgICAgICAgICAgICAgICBrZXlib2FyZElzT3Blbi5jdXJyZW50ID0gIWtleWJvYXJkSXNPcGVuLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzbmFwUG9pbnRzICYmIHNuYXBQb2ludHMubGVuZ3RoID4gMCAmJiBzbmFwUG9pbnRzT2Zmc2V0ICYmIGFjdGl2ZVNuYXBQb2ludEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVNuYXBQb2ludEhlaWdodCA9IHNuYXBQb2ludHNPZmZzZXRbYWN0aXZlU25hcFBvaW50SW5kZXhdIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIGRpZmZGcm9tSW5pdGlhbCArPSBhY3RpdmVTbmFwUG9pbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZpb3VzRGlmZkZyb21Jbml0aWFsLmN1cnJlbnQgPSBkaWZmRnJvbUluaXRpYWw7XG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgaGF2ZSB0byBjaGFuZ2UgdGhlIGhlaWdodCBpZiB0aGUgaW5wdXQgaXMgaW4gdmlldywgd2hlbiB3ZSBhcmUgaGVyZSB3ZSBhcmUgaW4gdGhlIG9wZW5lZCBrZXlib2FyZCBzdGF0ZSBzbyB3ZSBjYW4gY29ycmVjdGx5IGNoZWNrIGlmIHRoZSBpbnB1dCBpcyBpbiB2aWV3XG4gICAgICAgICAgICAgICAgaWYgKGRyYXdlckhlaWdodCA+IHZpc3VhbFZpZXdwb3J0SGVpZ2h0IHx8IGtleWJvYXJkSXNPcGVuLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gZHJhd2VyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3RHJhd2VySGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID4gdmlzdWFsVmlld3BvcnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RyYXdlckhlaWdodCA9IHZpc3VhbFZpZXdwb3J0SGVpZ2h0IC0gV0lORE9XX1RPUF9PRkZTRVQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiBmaXhlZCwgZG9uJ3QgbW92ZSB0aGUgZHJhd2VyIHVwd2FyZHMgaWYgdGhlcmUncyBzcGFjZSwgYnV0IHJhdGhlciBvbmx5IGNoYW5nZSBpdCdzIGhlaWdodCBzbyBpdCdzIGZ1bGx5IHNjcm9sbGFibGUgd2hlbiB0aGUga2V5Ym9hcmQgaXMgb3BlblxuICAgICAgICAgICAgICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdlclJlZi5jdXJyZW50LnN0eWxlLmhlaWdodCA9IGAke2hlaWdodCAtIE1hdGgubWF4KGRpZmZGcm9tSW5pdGlhbCwgMCl9cHhgO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhd2VyUmVmLmN1cnJlbnQuc3R5bGUuaGVpZ2h0ID0gYCR7TWF0aC5tYXgobmV3RHJhd2VySGVpZ2h0LCB2aXN1YWxWaWV3cG9ydEhlaWdodCAtIG9mZnNldEZyb21Ub3ApfXB4YDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdlclJlZi5jdXJyZW50LnN0eWxlLmhlaWdodCA9IGAke2luaXRpYWxEcmF3ZXJIZWlnaHQuY3VycmVudH1weGA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzbmFwUG9pbnRzICYmIHNuYXBQb2ludHMubGVuZ3RoID4gMCAmJiAha2V5Ym9hcmRJc09wZW4uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBkcmF3ZXJSZWYuY3VycmVudC5zdHlsZS5ib3R0b20gPSBgMHB4YDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBOZWdhdGl2ZSBib3R0b20gdmFsdWUgd291bGQgbmV2ZXIgbWFrZSBzZW5zZVxuICAgICAgICAgICAgICAgICAgICBkcmF3ZXJSZWYuY3VycmVudC5zdHlsZS5ib3R0b20gPSBgJHtNYXRoLm1heChkaWZmRnJvbUluaXRpYWwsIDApfXB4YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKF93aW5kb3dfdmlzdWFsVmlld3BvcnQgPSB3aW5kb3cudmlzdWFsVmlld3BvcnQpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93X3Zpc3VhbFZpZXdwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uVmlzdWFsVmlld3BvcnRDaGFuZ2UpO1xuICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgIHZhciBfd2luZG93X3Zpc3VhbFZpZXdwb3J0O1xuICAgICAgICAgICAgcmV0dXJuIChfd2luZG93X3Zpc3VhbFZpZXdwb3J0ID0gd2luZG93LnZpc3VhbFZpZXdwb3J0KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvd192aXN1YWxWaWV3cG9ydC5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblZpc3VhbFZpZXdwb3J0Q2hhbmdlKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXG4gICAgICAgIGFjdGl2ZVNuYXBQb2ludEluZGV4LFxuICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICBzbmFwUG9pbnRzT2Zmc2V0XG4gICAgXSk7XG4gICAgZnVuY3Rpb24gY2xvc2VEcmF3ZXIoZnJvbVdpdGhpbikge1xuICAgICAgICBjYW5jZWxEcmFnKCk7XG4gICAgICAgIG9uQ2xvc2UgPT0gbnVsbCA/IHZvaWQgMCA6IG9uQ2xvc2UoKTtcbiAgICAgICAgaWYgKCFmcm9tV2l0aGluKSB7XG4gICAgICAgICAgICBzZXRJc09wZW4oZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgIGlmIChzbmFwUG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlU25hcFBvaW50KHNuYXBQb2ludHNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBUUkFOU0lUSU9OUy5EVVJBVElPTiAqIDEwMDApOyAvLyBzZWNvbmRzIHRvIG1zXG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2V0RHJhd2VyKCkge1xuICAgICAgICBpZiAoIWRyYXdlclJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS12YXVsLWRyYXdlci13cmFwcGVyXScpO1xuICAgICAgICBjb25zdCBjdXJyZW50U3dpcGVBbW91bnQgPSBnZXRUcmFuc2xhdGUoZHJhd2VyUmVmLmN1cnJlbnQsIGRpcmVjdGlvbik7XG4gICAgICAgIHNldChkcmF3ZXJSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwgMCwgMCknLFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke1RSQU5TSVRJT05TLkRVUkFUSU9OfXMgY3ViaWMtYmV6aWVyKCR7VFJBTlNJVElPTlMuRUFTRS5qb2luKCcsJyl9KWBcbiAgICAgICAgfSk7XG4gICAgICAgIHNldChvdmVybGF5UmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7VFJBTlNJVElPTlMuRFVSQVRJT059cyBjdWJpYy1iZXppZXIoJHtUUkFOU0lUSU9OUy5FQVNFLmpvaW4oJywnKX0pYCxcbiAgICAgICAgICAgIG9wYWNpdHk6ICcxJ1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gRG9uJ3QgcmVzZXQgYmFja2dyb3VuZCBpZiBzd2lwZWQgdXB3YXJkc1xuICAgICAgICBpZiAoc2hvdWxkU2NhbGVCYWNrZ3JvdW5kICYmIGN1cnJlbnRTd2lwZUFtb3VudCAmJiBjdXJyZW50U3dpcGVBbW91bnQgPiAwICYmIGlzT3Blbikge1xuICAgICAgICAgICAgc2V0KHdyYXBwZXIsIHtcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IGAke0JPUkRFUl9SQURJVVN9cHhgLFxuICAgICAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAuLi5pc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKCR7Z2V0U2NhbGUoKX0pIHRyYW5zbGF0ZTNkKDAsIGNhbGMoZW52KHNhZmUtYXJlYS1pbnNldC10b3ApICsgMTRweCksIDApYCxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wJ1xuICAgICAgICAgICAgICAgIH0gOiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKCR7Z2V0U2NhbGUoKX0pIHRyYW5zbGF0ZTNkKGNhbGMoZW52KHNhZmUtYXJlYS1pbnNldC10b3ApICsgMTRweCksIDAsIDApYCxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogJ3RyYW5zZm9ybSwgYm9yZGVyLXJhZGl1cycsXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBgJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zYCxcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IGBjdWJpYy1iZXppZXIoJHtUUkFOU0lUSU9OUy5FQVNFLmpvaW4oJywnKX0pYFxuICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2FuY2VsRHJhZygpIHtcbiAgICAgICAgaWYgKCFpc0RyYWdnaW5nIHx8ICFkcmF3ZXJSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgICBkcmF3ZXJSZWYuY3VycmVudC5jbGFzc0xpc3QucmVtb3ZlKERSQUdfQ0xBU1MpO1xuICAgICAgICBpc0FsbG93ZWRUb0RyYWcuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICBzZXRJc0RyYWdnaW5nKGZhbHNlKTtcbiAgICAgICAgZHJhZ0VuZFRpbWUuY3VycmVudCA9IG5ldyBEYXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUmVsZWFzZShldmVudCkge1xuICAgICAgICBpZiAoIWlzRHJhZ2dpbmcgfHwgIWRyYXdlclJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgICAgIGRyYXdlclJlZi5jdXJyZW50LmNsYXNzTGlzdC5yZW1vdmUoRFJBR19DTEFTUyk7XG4gICAgICAgIGlzQWxsb3dlZFRvRHJhZy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHNldElzRHJhZ2dpbmcoZmFsc2UpO1xuICAgICAgICBkcmFnRW5kVGltZS5jdXJyZW50ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3Qgc3dpcGVBbW91bnQgPSBnZXRUcmFuc2xhdGUoZHJhd2VyUmVmLmN1cnJlbnQsIGRpcmVjdGlvbik7XG4gICAgICAgIGlmICghc2hvdWxkRHJhZyhldmVudC50YXJnZXQsIGZhbHNlKSB8fCAhc3dpcGVBbW91bnQgfHwgTnVtYmVyLmlzTmFOKHN3aXBlQW1vdW50KSkgcmV0dXJuO1xuICAgICAgICBpZiAoZHJhZ1N0YXJ0VGltZS5jdXJyZW50ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRpbWVUYWtlbiA9IGRyYWdFbmRUaW1lLmN1cnJlbnQuZ2V0VGltZSgpIC0gZHJhZ1N0YXJ0VGltZS5jdXJyZW50LmdldFRpbWUoKTtcbiAgICAgICAgY29uc3QgZGlzdE1vdmVkID0gcG9pbnRlclN0YXJ0LmN1cnJlbnQgLSAoaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gZXZlbnQuY2xpZW50WSA6IGV2ZW50LmNsaWVudFgpO1xuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IE1hdGguYWJzKGRpc3RNb3ZlZCkgLyB0aW1lVGFrZW47XG4gICAgICAgIGlmICh2ZWxvY2l0eSA+IDAuMDUpIHtcbiAgICAgICAgICAgIC8vIGBqdXN0UmVsZWFzZWRgIGlzIG5lZWRlZCB0byBwcmV2ZW50IHRoZSBkcmF3ZXIgZnJvbSBmb2N1c2luZyBvbiBhbiBpbnB1dCB3aGVuIHRoZSBkcmFnIGVuZHMsIGFzIGl0J3Mgbm90IHRoZSBpbnRlbnQgbW9zdCBvZiB0aGUgdGltZS5cbiAgICAgICAgICAgIHNldEp1c3RSZWxlYXNlZCh0cnVlKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICBzZXRKdXN0UmVsZWFzZWQoZmFsc2UpO1xuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc25hcFBvaW50cykge1xuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uTXVsdGlwbGllciA9IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbScgfHwgZGlyZWN0aW9uID09PSAncmlnaHQnID8gMSA6IC0xO1xuICAgICAgICAgICAgb25SZWxlYXNlU25hcFBvaW50cyh7XG4gICAgICAgICAgICAgICAgZHJhZ2dlZERpc3RhbmNlOiBkaXN0TW92ZWQgKiBkaXJlY3Rpb25NdWx0aXBsaWVyLFxuICAgICAgICAgICAgICAgIGNsb3NlRHJhd2VyLFxuICAgICAgICAgICAgICAgIHZlbG9jaXR5LFxuICAgICAgICAgICAgICAgIGRpc21pc3NpYmxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9uUmVsZWFzZVByb3AgPT0gbnVsbCA/IHZvaWQgMCA6IG9uUmVsZWFzZVByb3AoZXZlbnQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1vdmVkIHVwd2FyZHMsIGRvbid0IGRvIGFueXRoaW5nXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdib3R0b20nIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyA/IGRpc3RNb3ZlZCA+IDAgOiBkaXN0TW92ZWQgPCAwKSB7XG4gICAgICAgICAgICByZXNldERyYXdlcigpO1xuICAgICAgICAgICAgb25SZWxlYXNlUHJvcCA9PSBudWxsID8gdm9pZCAwIDogb25SZWxlYXNlUHJvcChldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZlbG9jaXR5ID4gVkVMT0NJVFlfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICBjbG9zZURyYXdlcigpO1xuICAgICAgICAgICAgb25SZWxlYXNlUHJvcCA9PSBudWxsID8gdm9pZCAwIDogb25SZWxlYXNlUHJvcChldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X2hlaWdodDtcbiAgICAgICAgY29uc3QgdmlzaWJsZURyYXdlckhlaWdodCA9IE1hdGgubWluKChfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X2hlaWdodCA9IGRyYXdlclJlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCkgIT0gbnVsbCA/IF9kcmF3ZXJSZWZfY3VycmVudF9nZXRCb3VuZGluZ0NsaWVudFJlY3RfaGVpZ2h0IDogMCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICAgICAgdmFyIF9kcmF3ZXJSZWZfY3VycmVudF9nZXRCb3VuZGluZ0NsaWVudFJlY3Rfd2lkdGg7XG4gICAgICAgIGNvbnN0IHZpc2libGVEcmF3ZXJXaWR0aCA9IE1hdGgubWluKChfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X3dpZHRoID0gZHJhd2VyUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgpICE9IG51bGwgPyBfZHJhd2VyUmVmX2N1cnJlbnRfZ2V0Qm91bmRpbmdDbGllbnRSZWN0X3dpZHRoIDogMCwgd2luZG93LmlubmVyV2lkdGgpO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWxTd2lwZSA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JztcbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlQW1vdW50KSA+PSAoaXNIb3Jpem9udGFsU3dpcGUgPyB2aXNpYmxlRHJhd2VyV2lkdGggOiB2aXNpYmxlRHJhd2VySGVpZ2h0KSAqIGNsb3NlVGhyZXNob2xkKSB7XG4gICAgICAgICAgICBjbG9zZURyYXdlcigpO1xuICAgICAgICAgICAgb25SZWxlYXNlUHJvcCA9PSBudWxsID8gdm9pZCAwIDogb25SZWxlYXNlUHJvcChldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9uUmVsZWFzZVByb3AgPT0gbnVsbCA/IHZvaWQgMCA6IG9uUmVsZWFzZVByb3AoZXZlbnQsIHRydWUpO1xuICAgICAgICByZXNldERyYXdlcigpO1xuICAgIH1cbiAgICBSZWFjdF9fZGVmYXVsdC51c2VFZmZlY3QoKCk9PntcbiAgICAgICAgLy8gVHJpZ2dlciBlbnRlciBhbmltYXRpb24gd2l0aG91dCB1c2luZyBDU1MgYW5pbWF0aW9uXG4gICAgICAgIGlmIChpc09wZW4pIHtcbiAgICAgICAgICAgIHNldChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxCZWhhdmlvcjogJ2F1dG8nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9wZW5UaW1lLmN1cnJlbnQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgcmVzZXQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCAnc2Nyb2xsQmVoYXZpb3InKTtcbiAgICAgICAgfTtcbiAgICB9LCBbXG4gICAgICAgIGlzT3BlblxuICAgIF0pO1xuICAgIGZ1bmN0aW9uIG9uTmVzdGVkT3BlbkNoYW5nZShvKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gbyA/ICh3aW5kb3cuaW5uZXJXaWR0aCAtIE5FU1RFRF9ESVNQTEFDRU1FTlQpIC8gd2luZG93LmlubmVyV2lkdGggOiAxO1xuICAgICAgICBjb25zdCB5ID0gbyA/IC1ORVNURURfRElTUExBQ0VNRU5UIDogMDtcbiAgICAgICAgaWYgKG5lc3RlZE9wZW5DaGFuZ2VUaW1lci5jdXJyZW50KSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KG5lc3RlZE9wZW5DaGFuZ2VUaW1lci5jdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBzZXQoZHJhd2VyUmVmLmN1cnJlbnQsIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoJHtzY2FsZX0pIHRyYW5zbGF0ZTNkKDAsICR7eX1weCwgMClgXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIW8gJiYgZHJhd2VyUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIG5lc3RlZE9wZW5DaGFuZ2VUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gZ2V0VHJhbnNsYXRlKGRyYXdlclJlZi5jdXJyZW50LCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgICAgIHNldChkcmF3ZXJSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gYHRyYW5zbGF0ZTNkKDAsICR7dHJhbnNsYXRlVmFsdWV9cHgsIDApYCA6IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVZhbHVlfXB4LCAwLCAwKWBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDUwMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gb25OZXN0ZWREcmFnKF9ldmVudCwgcGVyY2VudGFnZURyYWdnZWQpIHtcbiAgICAgICAgaWYgKHBlcmNlbnRhZ2VEcmFnZ2VkIDwgMCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBpbml0aWFsRGltID0gaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gd2luZG93LmlubmVySGVpZ2h0IDogd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIGNvbnN0IGluaXRpYWxTY2FsZSA9IChpbml0aWFsRGltIC0gTkVTVEVEX0RJU1BMQUNFTUVOVCkgLyBpbml0aWFsRGltO1xuICAgICAgICBjb25zdCBuZXdTY2FsZSA9IGluaXRpYWxTY2FsZSArIHBlcmNlbnRhZ2VEcmFnZ2VkICogKDEgLSBpbml0aWFsU2NhbGUpO1xuICAgICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSAtTkVTVEVEX0RJU1BMQUNFTUVOVCArIHBlcmNlbnRhZ2VEcmFnZ2VkICogTkVTVEVEX0RJU1BMQUNFTUVOVDtcbiAgICAgICAgc2V0KGRyYXdlclJlZi5jdXJyZW50LCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IGlzVmVydGljYWwoZGlyZWN0aW9uKSA/IGBzY2FsZSgke25ld1NjYWxlfSkgdHJhbnNsYXRlM2QoMCwgJHtuZXdUcmFuc2xhdGV9cHgsIDApYCA6IGBzY2FsZSgke25ld1NjYWxlfSkgdHJhbnNsYXRlM2QoJHtuZXdUcmFuc2xhdGV9cHgsIDAsIDApYCxcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICdub25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25OZXN0ZWRSZWxlYXNlKF9ldmVudCwgbykge1xuICAgICAgICBjb25zdCBkaW0gPSBpc1ZlcnRpY2FsKGRpcmVjdGlvbikgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBvID8gKGRpbSAtIE5FU1RFRF9ESVNQTEFDRU1FTlQpIC8gZGltIDogMTtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlID0gbyA/IC1ORVNURURfRElTUExBQ0VNRU5UIDogMDtcbiAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgIHNldChkcmF3ZXJSZWYuY3VycmVudCwge1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHtUUkFOU0lUSU9OUy5EVVJBVElPTn1zIGN1YmljLWJlemllcigke1RSQU5TSVRJT05TLkVBU0Uuam9pbignLCcpfSlgLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNWZXJ0aWNhbChkaXJlY3Rpb24pID8gYHNjYWxlKCR7c2NhbGV9KSB0cmFuc2xhdGUzZCgwLCAke3RyYW5zbGF0ZX1weCwgMClgIDogYHNjYWxlKCR7c2NhbGV9KSB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZX1weCwgMCwgMClgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KERpYWxvZ1ByaW1pdGl2ZS5Sb290LCB7XG4gICAgICAgIGRlZmF1bHRPcGVuOiBkZWZhdWx0T3BlbixcbiAgICAgICAgb25PcGVuQ2hhbmdlOiAob3Blbik9PntcbiAgICAgICAgICAgIGlmICghZGlzbWlzc2libGUpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICAgc2V0SGFzQmVlbk9wZW5lZCh0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xvc2VEcmF3ZXIodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRJc09wZW4ob3Blbik7XG4gICAgICAgIH0sXG4gICAgICAgIG9wZW46IGlzT3BlblxuICAgIH0sIC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChEcmF3ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICBhY3RpdmVTbmFwUG9pbnQsXG4gICAgICAgICAgICBzbmFwUG9pbnRzLFxuICAgICAgICAgICAgc2V0QWN0aXZlU25hcFBvaW50LFxuICAgICAgICAgICAgZHJhd2VyUmVmLFxuICAgICAgICAgICAgb3ZlcmxheVJlZixcbiAgICAgICAgICAgIG9uT3BlbkNoYW5nZSxcbiAgICAgICAgICAgIG9uUHJlc3MsXG4gICAgICAgICAgICBvblJlbGVhc2UsXG4gICAgICAgICAgICBvbkRyYWcsXG4gICAgICAgICAgICBkaXNtaXNzaWJsZSxcbiAgICAgICAgICAgIGhhbmRsZU9ubHksXG4gICAgICAgICAgICBpc09wZW4sXG4gICAgICAgICAgICBpc0RyYWdnaW5nLFxuICAgICAgICAgICAgc2hvdWxkRmFkZSxcbiAgICAgICAgICAgIGNsb3NlRHJhd2VyLFxuICAgICAgICAgICAgb25OZXN0ZWREcmFnLFxuICAgICAgICAgICAgb25OZXN0ZWRPcGVuQ2hhbmdlLFxuICAgICAgICAgICAgb25OZXN0ZWRSZWxlYXNlLFxuICAgICAgICAgICAga2V5Ym9hcmRJc09wZW4sXG4gICAgICAgICAgICBtb2RhbCxcbiAgICAgICAgICAgIHNuYXBQb2ludHNPZmZzZXQsXG4gICAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgICBzaG91bGRTY2FsZUJhY2tncm91bmQsXG4gICAgICAgICAgICBzZXRCYWNrZ3JvdW5kQ29sb3JPblNjYWxlLFxuICAgICAgICAgICAgbm9Cb2R5U3R5bGVzLFxuICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgIH1cbiAgICB9LCBjaGlsZHJlbikpO1xufVxuY29uc3QgT3ZlcmxheSA9IC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbih7IC4uLnJlc3QgfSwgcmVmKSB7XG4gICAgY29uc3QgeyBvdmVybGF5UmVmLCBzbmFwUG9pbnRzLCBvblJlbGVhc2UsIHNob3VsZEZhZGUsIGlzT3BlbiwgbW9kYWwgfSA9IHVzZURyYXdlckNvbnRleHQoKTtcbiAgICBjb25zdCBjb21wb3NlZFJlZiA9IHVzZUNvbXBvc2VkUmVmcyhyZWYsIG92ZXJsYXlSZWYpO1xuICAgIGNvbnN0IGhhc1NuYXBQb2ludHMgPSBzbmFwUG9pbnRzICYmIHNuYXBQb2ludHMubGVuZ3RoID4gMDtcbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KERpYWxvZ1ByaW1pdGl2ZS5PdmVybGF5LCB7XG4gICAgICAgIG9uTW91c2VVcDogb25SZWxlYXNlLFxuICAgICAgICByZWY6IGNvbXBvc2VkUmVmLFxuICAgICAgICBcImRhdGEtdmF1bC1vdmVybGF5XCI6IFwiXCIsXG4gICAgICAgIFwiZGF0YS12YXVsLXNuYXAtcG9pbnRzXCI6IGlzT3BlbiAmJiBoYXNTbmFwUG9pbnRzID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICAgICAgXCJkYXRhLXZhdWwtc25hcC1wb2ludHMtb3ZlcmxheVwiOiBpc09wZW4gJiYgc2hvdWxkRmFkZSA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBtb2RhbCA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nXG4gICAgICAgIH0sXG4gICAgICAgIC4uLnJlc3RcbiAgICB9KTtcbn0pO1xuT3ZlcmxheS5kaXNwbGF5TmFtZSA9ICdEcmF3ZXIuT3ZlcmxheSc7XG5jb25zdCBDb250ZW50ID0gLyojX19QVVJFX18qLyBSZWFjdF9fZGVmYXVsdC5mb3J3YXJkUmVmKGZ1bmN0aW9uKHsgb25Qb2ludGVyRG93bk91dHNpZGUsIHN0eWxlLCAuLi5yZXN0IH0sIHJlZikge1xuICAgIGNvbnN0IHsgZHJhd2VyUmVmLCBvblByZXNzLCBvblJlbGVhc2UsIG9uRHJhZywga2V5Ym9hcmRJc09wZW4sIHNuYXBQb2ludHNPZmZzZXQsIG1vZGFsLCBpc09wZW4sIGRpcmVjdGlvbiwgc25hcFBvaW50cywgY29udGFpbmVyLCBoYW5kbGVPbmx5IH0gPSB1c2VEcmF3ZXJDb250ZXh0KCk7XG4gICAgLy8gTmVlZGVkIHRvIHVzZSB0cmFuc2l0aW9uIGluc3RlYWQgb2YgYW5pbWF0aW9uc1xuICAgIGNvbnN0IFtkZWxheWVkU25hcFBvaW50cywgc2V0RGVsYXllZFNuYXBQb2ludHNdID0gUmVhY3RfX2RlZmF1bHQudXNlU3RhdGUoZmFsc2UpO1xuICAgIGNvbnN0IGNvbXBvc2VkUmVmID0gdXNlQ29tcG9zZWRSZWZzKHJlZiwgZHJhd2VyUmVmKTtcbiAgICBjb25zdCBwb2ludGVyU3RhcnRSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgd2FzQmV5b25kVGhlUG9pbnRSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoZmFsc2UpO1xuICAgIGNvbnN0IGhhc1NuYXBQb2ludHMgPSBzbmFwUG9pbnRzICYmIHNuYXBQb2ludHMubGVuZ3RoID4gMDtcbiAgICB1c2VTY2FsZUJhY2tncm91bmQoKTtcbiAgICBjb25zdCBpc0RlbHRhSW5EaXJlY3Rpb24gPSAoZGVsdGEsIGRpcmVjdGlvbiwgdGhyZXNob2xkID0gMCk9PntcbiAgICAgICAgaWYgKHdhc0JleW9uZFRoZVBvaW50UmVmLmN1cnJlbnQpIHJldHVybiB0cnVlO1xuICAgICAgICBjb25zdCBkZWx0YVkgPSBNYXRoLmFicyhkZWx0YS55KTtcbiAgICAgICAgY29uc3QgZGVsdGFYID0gTWF0aC5hYnMoZGVsdGEueCk7XG4gICAgICAgIGNvbnN0IGlzRGVsdGFYID0gZGVsdGFYID4gZGVsdGFZO1xuICAgICAgICBjb25zdCBkRmFjdG9yID0gW1xuICAgICAgICAgICAgJ2JvdHRvbScsXG4gICAgICAgICAgICAncmlnaHQnXG4gICAgICAgIF0uaW5jbHVkZXMoZGlyZWN0aW9uKSA/IDEgOiAtMTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgY29uc3QgaXNSZXZlcnNlRGlyZWN0aW9uID0gZGVsdGEueCAqIGRGYWN0b3IgPCAwO1xuICAgICAgICAgICAgaWYgKCFpc1JldmVyc2VEaXJlY3Rpb24gJiYgZGVsdGFYID49IDAgJiYgZGVsdGFYIDw9IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0RlbHRhWDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGlzUmV2ZXJzZURpcmVjdGlvbiA9IGRlbHRhLnkgKiBkRmFjdG9yIDwgMDtcbiAgICAgICAgICAgIGlmICghaXNSZXZlcnNlRGlyZWN0aW9uICYmIGRlbHRhWSA+PSAwICYmIGRlbHRhWSA8PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIWlzRGVsdGFYO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdhc0JleW9uZFRoZVBvaW50UmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFJlYWN0X19kZWZhdWx0LnVzZUVmZmVjdCgoKT0+e1xuICAgICAgICBpZiAoaGFzU25hcFBvaW50cykge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKT0+e1xuICAgICAgICAgICAgICAgIHNldERlbGF5ZWRTbmFwUG9pbnRzKHRydWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCBbXSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChEaWFsb2dQcmltaXRpdmUuQ29udGVudCwge1xuICAgICAgICBcImRhdGEtdmF1bC1kcmF3ZXItZGlyZWN0aW9uXCI6IGRpcmVjdGlvbixcbiAgICAgICAgXCJkYXRhLXZhdWwtZHJhd2VyXCI6IFwiXCIsXG4gICAgICAgIFwiZGF0YS12YXVsLWRlbGF5ZWQtc25hcC1wb2ludHNcIjogZGVsYXllZFNuYXBQb2ludHMgPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICBcImRhdGEtdmF1bC1zbmFwLXBvaW50c1wiOiBpc09wZW4gJiYgaGFzU25hcFBvaW50cyA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgIFwiZGF0YS12YXVsLWN1c3RvbS1jb250YWluZXJcIjogY29udGFpbmVyID8gJ3RydWUnIDogJ2ZhbHNlJyxcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgcmVmOiBjb21wb3NlZFJlZixcbiAgICAgICAgc3R5bGU6IHNuYXBQb2ludHNPZmZzZXQgJiYgc25hcFBvaW50c09mZnNldC5sZW5ndGggPiAwID8ge1xuICAgICAgICAgICAgJy0tc25hcC1wb2ludC1oZWlnaHQnOiBgJHtzbmFwUG9pbnRzT2Zmc2V0WzBdfXB4YCxcbiAgICAgICAgICAgIC4uLnN0eWxlXG4gICAgICAgIH0gOiBzdHlsZSxcbiAgICAgICAgb25Qb2ludGVyRG93bjogKGV2ZW50KT0+e1xuICAgICAgICAgICAgaWYgKGhhbmRsZU9ubHkpIHJldHVybjtcbiAgICAgICAgICAgIHJlc3Qub25Qb2ludGVyRG93biA9PSBudWxsID8gdm9pZCAwIDogcmVzdC5vblBvaW50ZXJEb3duLmNhbGwocmVzdCwgZXZlbnQpO1xuICAgICAgICAgICAgcG9pbnRlclN0YXJ0UmVmLmN1cnJlbnQgPSB7XG4gICAgICAgICAgICAgICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICAgICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgb25QcmVzcyhldmVudCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUG9pbnRlckRvd25PdXRzaWRlOiAoZSk9PntcbiAgICAgICAgICAgIG9uUG9pbnRlckRvd25PdXRzaWRlID09IG51bGwgPyB2b2lkIDAgOiBvblBvaW50ZXJEb3duT3V0c2lkZShlKTtcbiAgICAgICAgICAgIGlmICghbW9kYWwgfHwgZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXlib2FyZElzT3Blbi5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAga2V5Ym9hcmRJc09wZW4uY3VycmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkZvY3VzT3V0c2lkZTogKGUpPT57XG4gICAgICAgICAgICBpZiAoIW1vZGFsKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Qb2ludGVyTW92ZTogKGV2ZW50KT0+e1xuICAgICAgICAgICAgaWYgKGhhbmRsZU9ubHkpIHJldHVybjtcbiAgICAgICAgICAgIHJlc3Qub25Qb2ludGVyTW92ZSA9PSBudWxsID8gdm9pZCAwIDogcmVzdC5vblBvaW50ZXJNb3ZlLmNhbGwocmVzdCwgZXZlbnQpO1xuICAgICAgICAgICAgaWYgKCFwb2ludGVyU3RhcnRSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgeVBvc2l0aW9uID0gZXZlbnQuY2xpZW50WSAtIHBvaW50ZXJTdGFydFJlZi5jdXJyZW50Lnk7XG4gICAgICAgICAgICBjb25zdCB4UG9zaXRpb24gPSBldmVudC5jbGllbnRYIC0gcG9pbnRlclN0YXJ0UmVmLmN1cnJlbnQueDtcbiAgICAgICAgICAgIGNvbnN0IHN3aXBlU3RhcnRUaHJlc2hvbGQgPSBldmVudC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJyA/IDEwIDogMjtcbiAgICAgICAgICAgIGNvbnN0IGRlbHRhID0ge1xuICAgICAgICAgICAgICAgIHg6IHhQb3NpdGlvbixcbiAgICAgICAgICAgICAgICB5OiB5UG9zaXRpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBpc0FsbG93ZWRUb1N3aXBlID0gaXNEZWx0YUluRGlyZWN0aW9uKGRlbHRhLCBkaXJlY3Rpb24sIHN3aXBlU3RhcnRUaHJlc2hvbGQpO1xuICAgICAgICAgICAgaWYgKGlzQWxsb3dlZFRvU3dpcGUpIG9uRHJhZyhldmVudCk7XG4gICAgICAgICAgICBlbHNlIGlmIChNYXRoLmFicyh4UG9zaXRpb24pID4gc3dpcGVTdGFydFRocmVzaG9sZCB8fCBNYXRoLmFicyh5UG9zaXRpb24pID4gc3dpcGVTdGFydFRocmVzaG9sZCkge1xuICAgICAgICAgICAgICAgIHBvaW50ZXJTdGFydFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25Qb2ludGVyVXA6IChldmVudCk9PntcbiAgICAgICAgICAgIHJlc3Qub25Qb2ludGVyVXAgPT0gbnVsbCA/IHZvaWQgMCA6IHJlc3Qub25Qb2ludGVyVXAuY2FsbChyZXN0LCBldmVudCk7XG4gICAgICAgICAgICBwb2ludGVyU3RhcnRSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICB3YXNCZXlvbmRUaGVQb2ludFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgICAgICBvblJlbGVhc2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG59KTtcbkNvbnRlbnQuZGlzcGxheU5hbWUgPSAnRHJhd2VyLkNvbnRlbnQnO1xuY29uc3QgTE9OR19IQU5ETEVfUFJFU1NfVElNRU9VVCA9IDI1MDtcbmNvbnN0IERPVUJMRV9UQVBfVElNRU9VVCA9IDEyMDtcbmNvbnN0IEhhbmRsZSA9IC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuZm9yd2FyZFJlZihmdW5jdGlvbih7IHByZXZlbnRDeWNsZSA9IGZhbHNlLCBjaGlsZHJlbiwgLi4ucmVzdCB9LCByZWYpIHtcbiAgICBjb25zdCB7IGNsb3NlRHJhd2VyLCBpc0RyYWdnaW5nLCBzbmFwUG9pbnRzLCBhY3RpdmVTbmFwUG9pbnQsIHNldEFjdGl2ZVNuYXBQb2ludCwgZGlzbWlzc2libGUsIGhhbmRsZU9ubHksIGlzT3Blbiwgb25QcmVzcywgb25EcmFnIH0gPSB1c2VEcmF3ZXJDb250ZXh0KCk7XG4gICAgY29uc3QgY2xvc2VUaW1lb3V0SWRSZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYobnVsbCk7XG4gICAgY29uc3Qgc2hvdWxkQ2FuY2VsSW50ZXJhY3Rpb25SZWYgPSBSZWFjdF9fZGVmYXVsdC51c2VSZWYoZmFsc2UpO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0Q3ljbGUoKSB7XG4gICAgICAgIC8vIFN0b3AgaWYgdGhpcyBpcyB0aGUgc2Vjb25kIGNsaWNrIG9mIGEgZG91YmxlIGNsaWNrXG4gICAgICAgIGlmIChzaG91bGRDYW5jZWxJbnRlcmFjdGlvblJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICBoYW5kbGVDeWNsZVNuYXBQb2ludHMoKTtcbiAgICAgICAgfSwgRE9VQkxFX1RBUF9USU1FT1VUKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlQ3ljbGVTbmFwUG9pbnRzKCkge1xuICAgICAgICAvLyBQcmV2ZW50IGFjY2lkZW50YWwgdGFwcyB3aGlsZSByZXNpemluZyBkcmF3ZXJcbiAgICAgICAgaWYgKGlzRHJhZ2dpbmcgfHwgcHJldmVudEN5Y2xlIHx8IHNob3VsZENhbmNlbEludGVyYWN0aW9uUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbEludGVyYWN0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRvIGNsZWFyIHRoZSB0aW1lb3V0IGlkIGlmIHRoZSB1c2VyIHJlbGVhc2VzIHRoZSBoYW5kbGUgYmVmb3JlIHRoZSBjYW5jZWwgdGltZW91dFxuICAgICAgICBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbigpO1xuICAgICAgICBpZiAoKCFzbmFwUG9pbnRzIHx8IHNuYXBQb2ludHMubGVuZ3RoID09PSAwKSAmJiBkaXNtaXNzaWJsZSkge1xuICAgICAgICAgICAgY2xvc2VEcmF3ZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0xhc3RTbmFwUG9pbnQgPSBhY3RpdmVTbmFwUG9pbnQgPT09IHNuYXBQb2ludHNbc25hcFBvaW50cy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGlzTGFzdFNuYXBQb2ludCAmJiBkaXNtaXNzaWJsZSkge1xuICAgICAgICAgICAgY2xvc2VEcmF3ZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdXJyZW50U25hcEluZGV4ID0gc25hcFBvaW50cy5maW5kSW5kZXgoKHBvaW50KT0+cG9pbnQgPT09IGFjdGl2ZVNuYXBQb2ludCk7XG4gICAgICAgIGlmIChjdXJyZW50U25hcEluZGV4ID09PSAtMSkgcmV0dXJuOyAvLyBhY3RpdmVTbmFwUG9pbnQgbm90IGZvdW5kIGluIHNuYXBQb2ludHNcbiAgICAgICAgY29uc3QgbmV4dFNuYXBQb2ludCA9IHNuYXBQb2ludHNbY3VycmVudFNuYXBJbmRleCArIDFdO1xuICAgICAgICBzZXRBY3RpdmVTbmFwUG9pbnQobmV4dFNuYXBQb2ludCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0SW50ZXJhY3Rpb24oKSB7XG4gICAgICAgIGNsb3NlVGltZW91dElkUmVmLmN1cnJlbnQgPSB3aW5kb3cuc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgLy8gQ2FuY2VsIGNsaWNrIGludGVyYWN0aW9uIG9uIGEgbG9uZyBwcmVzc1xuICAgICAgICAgICAgc2hvdWxkQ2FuY2VsSW50ZXJhY3Rpb25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICAgIH0sIExPTkdfSEFORExFX1BSRVNTX1RJTUVPVVQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbigpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChjbG9zZVRpbWVvdXRJZFJlZi5jdXJyZW50KTtcbiAgICAgICAgc2hvdWxkQ2FuY2VsSW50ZXJhY3Rpb25SZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gLyojX19QVVJFX18qLyBSZWFjdF9fZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgb25DbGljazogaGFuZGxlU3RhcnRDeWNsZSxcbiAgICAgICAgb25Qb2ludGVyQ2FuY2VsOiBoYW5kbGVDYW5jZWxJbnRlcmFjdGlvbixcbiAgICAgICAgb25Qb2ludGVyRG93bjogKGUpPT57XG4gICAgICAgICAgICBpZiAoaGFuZGxlT25seSkgb25QcmVzcyhlKTtcbiAgICAgICAgICAgIGhhbmRsZVN0YXJ0SW50ZXJhY3Rpb24oKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Qb2ludGVyTW92ZTogKGUpPT57XG4gICAgICAgICAgICBpZiAoaGFuZGxlT25seSkgb25EcmFnKGUpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBvblBvaW50ZXJVcCBpcyBhbHJlYWR5IGhhbmRsZWQgYnkgdGhlIGNvbnRlbnQgY29tcG9uZW50XG4gICAgICAgIHJlZjogcmVmLFxuICAgICAgICBcImRhdGEtdmF1bC1kcmF3ZXItdmlzaWJsZVwiOiBpc09wZW4gPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICBcImRhdGEtdmF1bC1oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgLi4ucmVzdFxuICAgIH0sIC8qI19fUFVSRV9fKi8gUmVhY3RfX2RlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBcImRhdGEtdmF1bC1oYW5kbGUtaGl0YXJlYVwiOiBcIlwiLFxuICAgICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gICAgfSwgY2hpbGRyZW4pKTtcbn0pO1xuSGFuZGxlLmRpc3BsYXlOYW1lID0gJ0RyYXdlci5IYW5kbGUnO1xuZnVuY3Rpb24gTmVzdGVkUm9vdCh7IG9uRHJhZywgb25PcGVuQ2hhbmdlLCAuLi5yZXN0IH0pIHtcbiAgICBjb25zdCB7IG9uTmVzdGVkRHJhZywgb25OZXN0ZWRPcGVuQ2hhbmdlLCBvbk5lc3RlZFJlbGVhc2UgfSA9IHVzZURyYXdlckNvbnRleHQoKTtcbiAgICBpZiAoIW9uTmVzdGVkRHJhZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyYXdlci5OZXN0ZWRSb290IG11c3QgYmUgcGxhY2VkIGluIGFub3RoZXIgZHJhd2VyJyk7XG4gICAgfVxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoUm9vdCwge1xuICAgICAgICBuZXN0ZWQ6IHRydWUsXG4gICAgICAgIG9uQ2xvc2U6ICgpPT57XG4gICAgICAgICAgICBvbk5lc3RlZE9wZW5DaGFuZ2UoZmFsc2UpO1xuICAgICAgICB9LFxuICAgICAgICBvbkRyYWc6IChlLCBwKT0+e1xuICAgICAgICAgICAgb25OZXN0ZWREcmFnKGUsIHApO1xuICAgICAgICAgICAgb25EcmFnID09IG51bGwgPyB2b2lkIDAgOiBvbkRyYWcoZSwgcCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uT3BlbkNoYW5nZTogKG8pPT57XG4gICAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgICAgIG9uTmVzdGVkT3BlbkNoYW5nZShvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25SZWxlYXNlOiBvbk5lc3RlZFJlbGVhc2UsXG4gICAgICAgIC4uLnJlc3RcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIFBvcnRhbChwcm9wcykge1xuICAgIGNvbnN0IGNvbnRleHQgPSB1c2VEcmF3ZXJDb250ZXh0KCk7XG4gICAgY29uc3QgeyBjb250YWluZXIgPSBjb250ZXh0LmNvbnRhaW5lciwgLi4ucG9ydGFsUHJvcHMgfSA9IHByb3BzO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovIFJlYWN0X19kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRGlhbG9nUHJpbWl0aXZlLlBvcnRhbCwge1xuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgLi4ucG9ydGFsUHJvcHNcbiAgICB9KTtcbn1cbmNvbnN0IERyYXdlciA9IHtcbiAgICBSb290LFxuICAgIE5lc3RlZFJvb3QsXG4gICAgQ29udGVudCxcbiAgICBPdmVybGF5LFxuICAgIFRyaWdnZXI6IERpYWxvZ1ByaW1pdGl2ZS5UcmlnZ2VyLFxuICAgIFBvcnRhbCxcbiAgICBIYW5kbGUsXG4gICAgQ2xvc2U6IERpYWxvZ1ByaW1pdGl2ZS5DbG9zZSxcbiAgICBUaXRsZTogRGlhbG9nUHJpbWl0aXZlLlRpdGxlLFxuICAgIERlc2NyaXB0aW9uOiBEaWFsb2dQcmltaXRpdmUuRGVzY3JpcHRpb25cbn07XG5cbmV4cG9ydCB7IENvbnRlbnQsIERyYXdlciwgSGFuZGxlLCBOZXN0ZWRSb290LCBPdmVybGF5LCBQb3J0YWwsIFJvb3QgfTtcbiJdLCJuYW1lcyI6WyJfX2luc2VydENTUyIsImNvZGUiLCJkb2N1bWVudCIsImhlYWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0eWxlIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJhcHBlbmRDaGlsZCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJEaWFsb2dQcmltaXRpdmUiLCJSZWFjdCIsIlJlYWN0X19kZWZhdWx0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlRWZmZWN0IiwidXNlTWVtbyIsIkRyYXdlckNvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiZHJhd2VyUmVmIiwiY3VycmVudCIsIm92ZXJsYXlSZWYiLCJvblByZXNzIiwib25SZWxlYXNlIiwib25EcmFnIiwib25OZXN0ZWREcmFnIiwib25OZXN0ZWRPcGVuQ2hhbmdlIiwib25OZXN0ZWRSZWxlYXNlIiwib3BlblByb3AiLCJ1bmRlZmluZWQiLCJkaXNtaXNzaWJsZSIsImlzT3BlbiIsImlzRHJhZ2dpbmciLCJrZXlib2FyZElzT3BlbiIsInNuYXBQb2ludHNPZmZzZXQiLCJzbmFwUG9pbnRzIiwiaGFuZGxlT25seSIsIm1vZGFsIiwic2hvdWxkRmFkZSIsImFjdGl2ZVNuYXBQb2ludCIsIm9uT3BlbkNoYW5nZSIsInNldEFjdGl2ZVNuYXBQb2ludCIsImNsb3NlRHJhd2VyIiwiZGlyZWN0aW9uIiwic2hvdWxkU2NhbGVCYWNrZ3JvdW5kIiwic2V0QmFja2dyb3VuZENvbG9yT25TY2FsZSIsIm5vQm9keVN0eWxlcyIsImNvbnRhaW5lciIsInVzZURyYXdlckNvbnRleHQiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImNoYWluJDEiLCJjYWxsYmFja3MiLCJhcmdzIiwiY2FsbGJhY2siLCJpc01hYyIsInRlc3RQbGF0Zm9ybSIsImlzSVBob25lIiwiaXNJUGFkIiwibmF2aWdhdG9yIiwibWF4VG91Y2hQb2ludHMiLCJpc0lPUyIsInJlIiwid2luZG93IiwidGVzdCIsInBsYXRmb3JtIiwidmlzdWFsVmlld3BvcnQiLCJpc1Njcm9sbGFibGUiLCJub2RlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwiZ2V0U2Nyb2xsUGFyZW50IiwicGFyZW50RWxlbWVudCIsInNjcm9sbGluZ0VsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJub25UZXh0SW5wdXRUeXBlcyIsIlNldCIsInByZXZlbnRTY3JvbGxDb3VudCIsInJlc3RvcmUiLCJ1c2VQcmV2ZW50U2Nyb2xsIiwib3B0aW9ucyIsImlzRGlzYWJsZWQiLCJwcmV2ZW50U2Nyb2xsTW9iaWxlU2FmYXJpIiwicHJldmVudFNjcm9sbFN0YW5kYXJkIiwic2V0U3R5bGUiLCJpbm5lcldpZHRoIiwiY2xpZW50V2lkdGgiLCJzY3JvbGxhYmxlIiwibGFzdFkiLCJvblRvdWNoU3RhcnQiLCJlIiwidGFyZ2V0IiwiYm9keSIsImNoYW5nZWRUb3VjaGVzIiwicGFnZVkiLCJvblRvdWNoTW92ZSIsInByZXZlbnREZWZhdWx0IiwieSIsInNjcm9sbFRvcCIsImJvdHRvbSIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsIm9uVG91Y2hFbmQiLCJpc0lucHV0IiwiYWN0aXZlRWxlbWVudCIsInRyYW5zZm9ybSIsImZvY3VzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib25Gb2N1cyIsImhlaWdodCIsImlubmVySGVpZ2h0Iiwic2Nyb2xsSW50b1ZpZXciLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsIm9uV2luZG93U2Nyb2xsIiwic2Nyb2xsVG8iLCJzY3JvbGxYIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxZIiwicGFnZVlPZmZzZXQiLCJyZXN0b3JlU3R5bGVzIiwicmVtb3ZlRXZlbnRzIiwiYWRkRXZlbnQiLCJwYXNzaXZlIiwiY2FwdHVyZSIsImVsZW1lbnQiLCJ2YWx1ZSIsImN1ciIsImV2ZW50IiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyb290Iiwic2Nyb2xsYWJsZVRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvcCIsInRhcmdldFRvcCIsInRhcmdldEJvdHRvbSIsImtleWJvYXJkSGVpZ2h0IiwiSFRNTElucHV0RWxlbWVudCIsImhhcyIsIkhUTUxUZXh0QXJlYUVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzQ29udGVudEVkaXRhYmxlIiwic2V0UmVmIiwicmVmIiwiY29tcG9zZVJlZnMiLCJyZWZzIiwiZm9yRWFjaCIsInVzZUNvbXBvc2VkUmVmcyIsInVzZUNhbGxiYWNrIiwiY2FjaGUiLCJXZWFrTWFwIiwic2V0IiwiZWwiLCJzdHlsZXMiLCJpZ25vcmVDYWNoZSIsIm9yaWdpbmFsU3R5bGVzIiwiT2JqZWN0IiwiZW50cmllcyIsImtleSIsInN0YXJ0c1dpdGgiLCJzZXRQcm9wZXJ0eSIsInJlc2V0IiwicHJvcCIsImdldCIsImlzVmVydGljYWwiLCJnZXRUcmFuc2xhdGUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJtb3pUcmFuc2Zvcm0iLCJtYXQiLCJtYXRjaCIsInBhcnNlRmxvYXQiLCJzcGxpdCIsImRhbXBlblZhbHVlIiwidiIsIk1hdGgiLCJsb2ciLCJhc3NpZ25TdHlsZSIsInByZXZTdHlsZSIsImFzc2lnbiIsImNoYWluIiwiZm5zIiwiZm4iLCJUUkFOU0lUSU9OUyIsIkRVUkFUSU9OIiwiRUFTRSIsIlZFTE9DSVRZX1RIUkVTSE9MRCIsIkNMT1NFX1RIUkVTSE9MRCIsIlNDUk9MTF9MT0NLX1RJTUVPVVQiLCJCT1JERVJfUkFESVVTIiwiTkVTVEVEX0RJU1BMQUNFTUVOVCIsIldJTkRPV19UT1BfT0ZGU0VUIiwiRFJBR19DTEFTUyIsInVzZUNhbGxiYWNrUmVmIiwiY2FsbGJhY2tSZWYiLCJ1c2VSZWYiLCJjYWxsIiwidXNlVW5jb250cm9sbGVkU3RhdGUiLCJkZWZhdWx0UHJvcCIsIm9uQ2hhbmdlIiwidW5jb250cm9sbGVkU3RhdGUiLCJ1c2VTdGF0ZSIsInByZXZWYWx1ZVJlZiIsImhhbmRsZUNoYW5nZSIsInVzZUNvbnRyb2xsYWJsZVN0YXRlIiwidW5jb250cm9sbGVkUHJvcCIsInNldFVuY29udHJvbGxlZFByb3AiLCJpc0NvbnRyb2xsZWQiLCJzZXRWYWx1ZSIsIm5leHRWYWx1ZSIsInNldHRlciIsInVzZVNuYXBQb2ludHMiLCJhY3RpdmVTbmFwUG9pbnRQcm9wIiwic2V0QWN0aXZlU25hcFBvaW50UHJvcCIsImZhZGVGcm9tSW5kZXgiLCJvblNuYXBQb2ludENoYW5nZSIsInNuYXBUb1NlcXVlbnRpYWxQb2ludCIsIndpbmRvd0RpbWVuc2lvbnMiLCJzZXRXaW5kb3dEaW1lbnNpb25zIiwib25SZXNpemUiLCJpc0xhc3RTbmFwUG9pbnQiLCJsZW5ndGgiLCJhY3RpdmVTbmFwUG9pbnRJbmRleCIsImZpbmRJbmRleCIsInNuYXBQb2ludCIsIk51bWJlciIsImlzTmFOIiwiY29udGFpbmVyU2l6ZSIsIndpZHRoIiwiX3NuYXBQb2ludHNfbWFwIiwibWFwIiwiaXNQeCIsInNuYXBQb2ludEFzTnVtYmVyIiwicGFyc2VJbnQiLCJhY3RpdmVTbmFwUG9pbnRPZmZzZXQiLCJzbmFwVG9Qb2ludCIsImRpbWVuc2lvbiIsIl9zbmFwUG9pbnRzT2Zmc2V0X2ZpbmRJbmRleCIsIm5ld1NuYXBQb2ludEluZGV4Iiwic25hcFBvaW50RGltIiwidHJhbnNpdGlvbiIsImpvaW4iLCJvcGFjaXR5IiwibWF4IiwiX3NuYXBQb2ludHNfZmluZEluZGV4IiwibmV3SW5kZXgiLCJkcmFnZ2VkRGlzdGFuY2UiLCJ2ZWxvY2l0eSIsImN1cnJlbnRQb3NpdGlvbiIsImlzT3ZlcmxheVNuYXBQb2ludCIsImlzRmlyc3QiLCJoYXNEcmFnZ2VkVXAiLCJjbG9zZXN0U25hcFBvaW50IiwicmVkdWNlIiwicHJldiIsImN1cnIiLCJhYnMiLCJkaW0iLCJkcmFnRGlyZWN0aW9uIiwibmV3VmFsdWUiLCJnZXRQZXJjZW50YWdlRHJhZ2dlZCIsImFic0RyYWdnZWREaXN0YW5jZSIsImlzRHJhZ2dpbmdEb3duIiwiaXNPdmVybGF5U25hcFBvaW50T3JIaWdoZXIiLCJ0YXJnZXRTbmFwUG9pbnRJbmRleCIsInNuYXBQb2ludERpc3RhbmNlIiwicGVyY2VudGFnZURyYWdnZWQiLCJub29wIiwidXNlU2NhbGVCYWNrZ3JvdW5kIiwidGltZW91dElkUmVmIiwiaW5pdGlhbEJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRDb2xvciIsImdldFNjYWxlIiwiY2xlYXJUaW1lb3V0Iiwid3JhcHBlciIsInF1ZXJ5U2VsZWN0b3IiLCJib2R5QW5kV3JhcHBlckNsZWFudXAiLCJiYWNrZ3JvdW5kIiwidHJhbnNmb3JtT3JpZ2luIiwidHJhbnNpdGlvblByb3BlcnR5IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uIiwid3JhcHBlclN0eWxlc0NsZWFudXAiLCJib3JkZXJSYWRpdXMiLCJzZXRUaW1lb3V0IiwicmVtb3ZlUHJvcGVydHkiLCJSb290Iiwib3BlbiIsImNoaWxkcmVuIiwib25EcmFnUHJvcCIsIm9uUmVsZWFzZVByb3AiLCJjbG9zZVRocmVzaG9sZCIsInNjcm9sbExvY2tUaW1lb3V0IiwiZml4ZWQiLCJvbkNsb3NlIiwiZGVmYXVsdE9wZW4iLCJkaXNhYmxlUHJldmVudFNjcm9sbCIsInJlcG9zaXRpb25JbnB1dHMiLCJvbkFuaW1hdGlvbkVuZCIsIl9kcmF3ZXJSZWZfY3VycmVudCIsInNldElzT3BlbiIsIm8iLCJwb2ludGVyRXZlbnRzIiwiaGFzQmVlbk9wZW5lZCIsInNldEhhc0JlZW5PcGVuZWQiLCJzZXRJc0RyYWdnaW5nIiwianVzdFJlbGVhc2VkIiwic2V0SnVzdFJlbGVhc2VkIiwib3BlblRpbWUiLCJkcmFnU3RhcnRUaW1lIiwiZHJhZ0VuZFRpbWUiLCJsYXN0VGltZURyYWdQcmV2ZW50ZWQiLCJpc0FsbG93ZWRUb0RyYWciLCJuZXN0ZWRPcGVuQ2hhbmdlVGltZXIiLCJwb2ludGVyU3RhcnQiLCJwcmV2aW91c0RpZmZGcm9tSW5pdGlhbCIsImRyYXdlckhlaWdodFJlZiIsImluaXRpYWxEcmF3ZXJIZWlnaHQiLCJEYXRlIiwib25SZWxlYXNlU25hcFBvaW50cyIsIm9uRHJhZ1NuYXBQb2ludHMiLCJnZXRTbmFwUG9pbnRzUGVyY2VudGFnZURyYWdnZWQiLCJjb250YWlucyIsInNldFBvaW50ZXJDYXB0dXJlIiwicG9pbnRlcklkIiwiY2xpZW50WSIsImNsaWVudFgiLCJzaG91bGREcmFnIiwiaXNEcmFnZ2luZ0luRGlyZWN0aW9uIiwiX3dpbmRvd19nZXRTZWxlY3Rpb24iLCJfbGFzdFRpbWVEcmFnUHJldmVudGVkX2N1cnJlbnQiLCJoaWdobGlnaHRlZFRleHQiLCJnZXRTZWxlY3Rpb24iLCJ0b1N0cmluZyIsInN3aXBlQW1vdW50IiwiZGF0ZSIsImhhc0F0dHJpYnV0ZSIsImNsb3Nlc3QiLCJnZXRUaW1lIiwiZ2V0QXR0cmlidXRlIiwicGFyZW50Tm9kZSIsImRpcmVjdGlvbk11bHRpcGxpZXIiLCJub0Nsb3NlU25hcFBvaW50c1ByZUNvbmRpdGlvbiIsInNuYXBQb2ludFBlcmNlbnRhZ2VEcmFnZ2VkIiwiY2xhc3NMaXN0IiwiYWRkIiwiZGFtcGVuZWREcmFnZ2VkRGlzdGFuY2UiLCJ0cmFuc2xhdGVWYWx1ZSIsIm1pbiIsIm9wYWNpdHlWYWx1ZSIsInNjYWxlVmFsdWUiLCJib3JkZXJSYWRpdXNWYWx1ZSIsIl93aW5kb3dfdmlzdWFsVmlld3BvcnQiLCJvblZpc3VhbFZpZXdwb3J0Q2hhbmdlIiwiZm9jdXNlZEVsZW1lbnQiLCJ2aXN1YWxWaWV3cG9ydEhlaWdodCIsImRpZmZGcm9tSW5pdGlhbCIsImRyYXdlckhlaWdodCIsIm9mZnNldEZyb21Ub3AiLCJhY3RpdmVTbmFwUG9pbnRIZWlnaHQiLCJuZXdEcmF3ZXJIZWlnaHQiLCJmcm9tV2l0aGluIiwiY2FuY2VsRHJhZyIsInJlc2V0RHJhd2VyIiwiY3VycmVudFN3aXBlQW1vdW50IiwicmVtb3ZlIiwidGltZVRha2VuIiwiZGlzdE1vdmVkIiwiX2RyYXdlclJlZl9jdXJyZW50X2dldEJvdW5kaW5nQ2xpZW50UmVjdF9oZWlnaHQiLCJ2aXNpYmxlRHJhd2VySGVpZ2h0IiwiX2RyYXdlclJlZl9jdXJyZW50X2dldEJvdW5kaW5nQ2xpZW50UmVjdF93aWR0aCIsInZpc2libGVEcmF3ZXJXaWR0aCIsImlzSG9yaXpvbnRhbFN3aXBlIiwic2Nyb2xsQmVoYXZpb3IiLCJzY2FsZSIsIl9ldmVudCIsImluaXRpYWxEaW0iLCJpbml0aWFsU2NhbGUiLCJuZXdTY2FsZSIsIm5ld1RyYW5zbGF0ZSIsInRyYW5zbGF0ZSIsIlByb3ZpZGVyIiwiT3ZlcmxheSIsImZvcndhcmRSZWYiLCJyZXN0IiwiY29tcG9zZWRSZWYiLCJoYXNTbmFwUG9pbnRzIiwib25Nb3VzZVVwIiwidmlzaWJpbGl0eSIsImRpc3BsYXlOYW1lIiwiQ29udGVudCIsIm9uUG9pbnRlckRvd25PdXRzaWRlIiwiZGVsYXllZFNuYXBQb2ludHMiLCJzZXREZWxheWVkU25hcFBvaW50cyIsInBvaW50ZXJTdGFydFJlZiIsIndhc0JleW9uZFRoZVBvaW50UmVmIiwiaXNEZWx0YUluRGlyZWN0aW9uIiwiZGVsdGEiLCJ0aHJlc2hvbGQiLCJkZWx0YVkiLCJkZWx0YVgiLCJ4IiwiaXNEZWx0YVgiLCJkRmFjdG9yIiwiaW5jbHVkZXMiLCJpc1JldmVyc2VEaXJlY3Rpb24iLCJvblBvaW50ZXJEb3duIiwiZGVmYXVsdFByZXZlbnRlZCIsIm9uRm9jdXNPdXRzaWRlIiwib25Qb2ludGVyTW92ZSIsInlQb3NpdGlvbiIsInhQb3NpdGlvbiIsInN3aXBlU3RhcnRUaHJlc2hvbGQiLCJwb2ludGVyVHlwZSIsImlzQWxsb3dlZFRvU3dpcGUiLCJvblBvaW50ZXJVcCIsIkxPTkdfSEFORExFX1BSRVNTX1RJTUVPVVQiLCJET1VCTEVfVEFQX1RJTUVPVVQiLCJIYW5kbGUiLCJwcmV2ZW50Q3ljbGUiLCJjbG9zZVRpbWVvdXRJZFJlZiIsInNob3VsZENhbmNlbEludGVyYWN0aW9uUmVmIiwiaGFuZGxlU3RhcnRDeWNsZSIsImhhbmRsZUNhbmNlbEludGVyYWN0aW9uIiwiaGFuZGxlQ3ljbGVTbmFwUG9pbnRzIiwiY3VycmVudFNuYXBJbmRleCIsInBvaW50IiwibmV4dFNuYXBQb2ludCIsImhhbmRsZVN0YXJ0SW50ZXJhY3Rpb24iLCJvbkNsaWNrIiwib25Qb2ludGVyQ2FuY2VsIiwiTmVzdGVkUm9vdCIsIm5lc3RlZCIsInAiLCJQb3J0YWwiLCJwcm9wcyIsInBvcnRhbFByb3BzIiwiRHJhd2VyIiwiVHJpZ2dlciIsIkNsb3NlIiwiVGl0bGUiLCJEZXNjcmlwdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/vaul/dist/index.mjs\n");

/***/ })

};
;